dnl Test suite containing tests that do not fit another file
AT_BANNER([------------------  AGGREGATION TESTS -----------------------])

dnl Here we try to change the values of an existing variable, which is disallowed in this version
AT_ASSERT_PARSE_ERROR([agg/error_multi_aggs.ncml])
AT_ASSERT_PARSE_ERROR([agg/error_improper_netcdf_loc.ncml])
AT_ASSERT_PARSE_ERROR([agg/error_agg_in_wrong_loc_1.ncml])
AT_ASSERT_PARSE_ERROR([agg/error_agg_in_wrong_loc_2.ncml])

dnl UNION : Acceptance tests on attributes and variables for union
dnl First, test a basic purely virtual dataset one level deep aggregates correctly.
AT_CHECK_ALL_DAP_RESPONSES([agg/virtual_union.ncml])
AT_CHECK_DATADDS_GETDAP([agg/virtual_union.ncml])

dnl TODO test a two level nest to make sure that works correctly
AT_CHECK_ALL_DAP_RESPONSES([agg/multi_nested_unions.ncml])
AT_CHECK_DATADDS_GETDAP([agg/multi_nested_unions.ncml])

dnl TODO test that NcML transformations can be applied to data AFTER
dnl it has been aggregated.  
AT_CHECK_ALL_DAP_RESPONSES([agg/modify_post_union.ncml])
AT_CHECK_DATADDS_GETDAP([agg/modify_post_union.ncml])

dnl Test from the Unidata NCML Aggregation tutorial
AT_CHECK_ALL_DAP_RESPONSES([agg/aggUnionSimple.ncml])

dnl----------------- Dimensions ---------------------------
dnl Test example virtual datasets with dimensions.

dnl Check that a union with correct matching dimensions works
dnl Technically, there is nothing to check since the dims are used 
dnl inside the child datasets to generate data, and not otherwise...
dnl Only shared would technically need to match, but DAP2 does not have them yet...
AT_CHECK_ALL_DAP_RESPONSES([agg/union_with_dimensions.ncml])
AT_CHECK_DATADDS_GETDAP([agg/union_with_dimensions.ncml])

dnl Check parse error on a dimension mismatch in the union
dnl This is where we'd have to make the error...  We're not
dnl going to traverse into DAP objects to check dimensions for now...
AT_ASSERT_PARSE_ERROR([agg/union_dimension_mismatch_error.ncml])

dnl ------------ joinNew -----------------

dnl Test the parse error branches
dnl Test that not having an aggregation variable in all datasets is an error
AT_ASSERT_PARSE_ERROR([agg/joinNew_error_1.ncml])

dnl Test that datasets not all matching type is an error!
dnl NOTE: Fails for BES 3.8.4 and earlier!
AT_ASSERT_PARSE_ERROR_FOR_DODS([agg/joinNew_error_2.ncml])

dnl Test that mismatched member dataset shapes is an error!
dnl NOTE: Fails for BES 3.8.4 and earlier!
AT_ASSERT_PARSE_ERROR_FOR_DODS([agg/joinNew_error_3.ncml])

dnl Test datasets not matching dimension length is error
AT_ASSERT_PARSE_ERROR([agg/joinNew_error_4.ncml])

dnl Tests for simple joinNew aggregation 
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_simple.ncml])
AT_CHECK_DATADDS_GETDAP([agg/joinNew_simple.ncml])

dnl Another example with more datasets
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_simple_2.ncml])
AT_CHECK_DATADDS_GETDAP([agg/joinNew_simple_2.ncml])

dnl Another with more than one aggregation variable
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_simple_3.ncml])
AT_CHECK_DATADDS_GETDAP([agg/joinNew_simple_3.ncml])

dnl =======================================================
dnl Test constraints on the virtual dataset aggs

dnl Test that the outer dimension slices match the original datasets
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_simple.ncml],[[ V[0][0:4] ]], [agg/joinNew_simple_cons_1.ncml])
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_simple.ncml],[[ V[1][0:4] ]], [agg/joinNew_simple_cons_2.ncml])

dnl Test grabbing a slice from the "middle" of an aggregated set
dnl FIXME DAP4 FAILURES
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_simple_2.ncml],[[ V[2][1:2] ]], [agg/joinNew_simple_2_cons_1.ncml])

dnl Grab two separate dataset slices from the middle
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_simple_2.ncml],[[ V[1:2][0:4] ]], [agg/joinNew_simple_2_cons_2.ncml])

dnl Grab an outside dimension slice of just one entry (second entry of all datasets)
dnl FIXME DAP4 FAILURES
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_simple_2.ncml],[[ V[0:3][1] ]], [agg/joinNew_simple_2_cons_3.ncml])

dnl Test a Netcdf Array aggregation, in this case three fnoc1.nc appended together as a joinNew
AT_CHECK_ALL_DAP_RESPONSES([agg/netcdf_joinNew.ncml])
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/netcdf_joinNew.ncml],[[ u[1][0][10:11][10:11] ]], [agg/netcdf_joinNew_cons_1.ncml])

dnl Test with HDF5 Datasets
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_hdf5.ncml])

dnl Test adding an explicit map vector after the array aggregation that
dnl refers to the new outer dimension.  Has metadata and explicit
dnl values list.
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_with_explicit_map.ncml])
AT_CHECK_DATADDS_GETDAP([agg/joinNew_with_explicit_map.ncml])

dnl Also test we can set an explicit map with autogenerated 
dnl values via the values@start and values@increment form of values element
dnl if defined AFTER the aggregation in the file.
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_explicit_autogen.ncml])
AT_CHECK_DATADDS_GETDAP([agg/joinNew_explicit_autogen.ncml])

dnl Make sure that the wrong number of entries in the explicit map
dnl is an error.
AT_ASSERT_PARSE_ERROR([agg/joinNew_explicit_map_err_1.ncml])

dnl Make sure that a coord var of form name(!name) is an error.
dnl Coordinate variables must have the same name and single dimension
dnl of the new outer dimension for the joinNew!
AT_ASSERT_PARSE_ERROR([agg/joinNew_explicit_map_err_2.ncml])

dnl Test the use of coordValue on all explicitly listed datasets 
dnl produces a proper coordinate variable.  
dnl Note there are two cases:
dnl     o Numeric coords
dnl     o String coords (all else)

dnl String 
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_string_coordVal.ncml])
AT_CHECK_DATADDS_GETDAP([agg/joinNew_string_coordVal.ncml])

dnl Numeric
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_numeric_coordValue.ncml])
AT_CHECK_DATADDS_GETDAP([agg/joinNew_numeric_coordValue.ncml])

dnl Rejection tests (parse error) for coordValue are needed as well for cases:
dnl 	o First netcdf has numeric, but a later one doesn't.
dnl     o First netcdf has string, but a later one has empty string.
AT_ASSERT_PARSE_ERROR([agg/joinNew_string_coordVal_error.ncml])
dnl Check for a missing number after first
AT_ASSERT_PARSE_ERROR([agg/joinNew_numeric_coordValue_error_1.ncml])
dnl Check for a malformed number after first
AT_ASSERT_PARSE_ERROR([agg/joinNew_numeric_coordValue_error_2.ncml])

dnl TODO support for Grid and coordValue for the new map vector.

dnl --------------------------------------------------------------------------
dnl Test joinNew on Grid data.

dnl TODO Add test for a full aggregation?  Not sure anyone would ever
dnl do this in practice, but it would be good for us to know.

dnl Test constraints by choosing outer dimension slice for
dnl each set in the aggregation, each of which also has
dnl a slice taken from it.  

dnl ----------- TODO FIX THESE  These cause a problem with the attributes coming from the first dataset in 
dnl ------------ aggregation, but not in constrained outer dim....  Once we know right answer, we move on.
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_grid.ncml],[[ dsp_band_1[0][512][0:1023] ]], [agg/joinNew_grid_hslab_0])
dnl AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_grid.ncml],[[ dsp_band_1[1][512][0:1023] ]], [agg/joinNew_grid_hslab_1])
dnl AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_grid.ncml],[[ dsp_band_1[2][512][0:1023] ]], [agg/joinNew_grid_hslab_2])
dnl AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_grid.ncml],[[ dsp_band_1[3][512][0:1023] ]], [agg/joinNew_grid_hslab_3])
AT_RUN_BES_AND_COMPARE([agg/joinNew_grid.ncml],[dods],[agg/joinNew_grid_hslab_1],[[ dsp_band_1[1][512][0:1023] ]])
AT_RUN_BES_AND_COMPARE([agg/joinNew_grid.ncml],[dods],[agg/joinNew_grid_hslab_2],[[ dsp_band_1[2][512][0:1023] ]])
AT_RUN_BES_AND_COMPARE([agg/joinNew_grid.ncml],[dods],[agg/joinNew_grid_hslab_3],[[ dsp_band_1[3][512][0:1023] ]])

dnl Test projection of the data array portion out works
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_grid.ncml],[[ dsp_band_1.dsp_band_1[0][512][0:1023] ]], [agg/joinNew_grid_arr_hslab_0])

dnl Test a small inner slab that goes through all the outer dimension sets.
AT_RUN_BES_AND_COMPARE([agg/joinNew_grid.ncml],[dods],[agg/joinNew_grid_arr_hslab_0123],[[ dsp_band_1.dsp_band_1[0:3][512][500:600] ]])

dnl Testing that we can use a stride on the new dimension.
dnl getdap of the dods was compared with a handmade version
dnl from the original dataset getdaps (these are checked in
dnl also with a "handmade" extension for checking if needed).
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_grid.ncml],[[ dsp_band_1[0:2:3][512][0:1023] ]], [agg/joinNew_grid_stride_evens])
dnl TODO FIX ME Next one same issue with failure on metadata being from wrong spot...
dnl AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_grid.ncml],[[ dsp_band_1[1:2:3][512][0:1023] ]],0 [agg/joinNew_grid_stride_odds])
AT_RUN_BES_AND_COMPARE([agg/joinNew_grid.ncml],[dods],[agg/joinNew_grid_stride_odds],[[ dsp_band_1[1:2:3][512][0:1023] ]])

dnl Test a projection of a map.  Internally this doesn't load any of the grid array's....
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_grid.ncml],[[ dsp_band_1.lat[0:63] ]], [agg/joinNew_grid_proj_lat])

dnl Test the scan element for joinNew.  Since we expect the same aggregation as joinNew_grid.ncml to be
dnl created by joinNew_scan.ncml, we simply use the old baselines but change the filename internally by hand.
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_scan.ncml],[[ dsp_band_1[0][512][0:1023] ]], [agg/joinNew_scan_hslab_0])
AT_RUN_BES_AND_COMPARE([agg/joinNew_scan.ncml],[dods],[agg/joinNew_scan_hslab_1],[[ dsp_band_1[1][512][0:1023] ]])
AT_RUN_BES_AND_COMPARE([agg/joinNew_scan.ncml],[dods],[agg/joinNew_scan_hslab_2],[[ dsp_band_1[2][512][0:1023] ]])
AT_RUN_BES_AND_COMPARE([agg/joinNew_scan.ncml],[dods],[agg/joinNew_scan_hslab_3],[[ dsp_band_1[3][512][0:1023] ]])

dnl Test some errors on improper <scan> use
dnl Make sure parse error if scan is not a child of aggregation only
AT_ASSERT_PARSE_ERROR([agg/joinNew_scan_error.ncml])

dnl Make sure error if the path location is spelled wrong (missing dir) 
AT_ASSERT_PARSE_ERROR([agg/joinNew_scan_dir_error.ncml])

dnl Test the scan with a regular expression that matches the same set of files
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_scan_regexp_1.ncml],[[ dsp_band_1[0][512][0:1023] ]], [agg/joinNew_scan_regexp_hslab_0])
AT_RUN_BES_AND_COMPARE([agg/joinNew_scan_regexp_1.ncml],[dods],[agg/joinNew_scan_regexp_hslab_1],[[ dsp_band_1[1][512][0:1023] ]])
AT_RUN_BES_AND_COMPARE([agg/joinNew_scan_regexp_1.ncml],[dods],[agg/joinNew_scan_regexp_hslab_2],[[ dsp_band_1[2][512][0:1023] ]])
AT_RUN_BES_AND_COMPARE([agg/joinNew_scan_regexp_1.ncml],[dods],[agg/joinNew_scan_regexp_hslab_3],[[ dsp_band_1[3][512][0:1023] ]])

AT_RUN_BES_AND_COMPARE([agg/joinNew_scan_regexp_2.ncml],[dods],[agg/joinNew_scan_regexp_2_hslab_0],[[ dsp_band_1[0][512][0:1023] ]])
AT_RUN_BES_AND_COMPARE([agg/joinNew_scan_regexp_2.ncml],[dods],[agg/joinNew_scan_regexp_2_hslab_1],[[ dsp_band_1[1][512][0:1023] ]])
AT_RUN_BES_AND_COMPARE([agg/joinNew_scan_regexp_2.ncml],[dods],[agg/joinNew_scan_regexp_2_hslab_2],[[ dsp_band_1[2][512][0:1023] ]])
AT_RUN_BES_AND_COMPARE([agg/joinNew_scan_regexp_2.ncml],[dods],[agg/joinNew_scan_regexp_2_hslab_3],[[ dsp_band_1[3][512][0:1023] ]])

dnl Make sure a malformed regexp throws a parse error with the regerror msg in it.
AT_ASSERT_PARSE_ERROR([agg/joinNew_scan_regexp_error_1.ncml])

dnl Tests scan@olderThan attribute for excluding new files
dnl First test a simple parse error if the value can't be parsed into a time.
AT_ASSERT_PARSE_ERROR([agg/joinNew_scan_olderThan_error_1.ncml])

dnl Next, we'll touch the first three grid files to make their mod time now,
dnl then do the scan and make sure we just get the data from the final grid...
dnl AT_CHECK([besstandalone -c bes_conf_path -i ./test.bescmd], [], [stdout], [ignore])
AT_SETUP([Invoking touch on first three grid files for scan@olderThan test...])
AT_CHECK([touch full_data_path/agg/grids/f97182070958.hdf],[ignore],[ignore],[ignore])
AT_CHECK([touch full_data_path/agg/grids/f97182183448.hdf],[ignore],[ignore],[ignore])
AT_CHECK([touch full_data_path/agg/grids/f97183065853.hdf],[ignore],[ignore],[ignore])
AT_CLEANUP
AT_RUN_BES_AND_COMPARE([agg/joinNew_scan_olderThan.ncml],[dods],[agg/joinNew_scan_olderThan_hslab],[[ dsp_band_1[0][512][0:1023] ]])

dnl Test the scan@dateFormatMark using the datasets and example from: 
dnl http://www.unidata.ucar.edu/software/netcdf/ncml/v2.2/Aggregation.html
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_scan_dfm.ncml])
AT_CHECK_DATADDS_GETDAP([agg/joinNew_scan_dfm.ncml])

dnl Test that scan@dateFormatMark will properly sort on the ISO 8601
dnl coordValue and NOT filename if a dataFormatMark is specified.
dnl We do this with an aggregation whose lexicographic filename 
dnl sort is not chronological.
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_scan_dfm_2.ncml])
AT_CHECK_DATADDS_GETDAP([agg/joinNew_scan_dfm_2.ncml])

dnl TODO Check that a malformed SimpleDateFormat is an error.
AT_ASSERT_PARSE_ERROR([agg/joinNew_scan_dfm_err_2.ncml])

dnl --------------------------------------------------
dnl ----- Placeholder variable metadata checks -----------
dnl Test adding metadata to the newly created coordinate value/map vectors in a Grid joinNew

dnl First, we add the metadata after the aggregation
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_grid_metadata.ncml])

dnl And before the agg, both should work for placeholder data that is NOT explicit.
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_grid_pre_metadata.ncml])

dnl Also, if the coordValue is numeric, the map can be a placeholder of type double
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_grid_meta_2.ncml])

dnl Tests adding metadata to all parts of a Grid: the Grid itself
dnl the array, the existing maps, and the new map.
dnl Originally was causing bug for Ticket #1530 as well.
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_grid_meta_everywhere.ncml])

dnl --------------------------------------------------
dnl ----- joinNew Grid Metadata Rejection Tests

dnl Placeholder type does not match autogenerated type
AT_ASSERT_PARSE_ERROR([agg/joinNew_grid_meta_err_1.ncml])

dnl joinNew bug when an attribute container with the same name as a variable is attempted to be created.
AT_ASSERT_PARSE_ERROR([agg/joinNew_bug_1514.ncml])

dnl ---------------------------------------------------
dnl ---- Heterogeneous format joinNew test

dnl Make sure that a joinNew aggregation on data with mixed file
dnl formats but valid data structure works
dnl Just check the dods which is most important for this test.

dnl I commented out three tests because they seem to rely on DSP which 
dnl we're not supporting anymore. jhrg 12/31/12

dnl AT_RUN_BES_AND_COMPARE([agg/joinNew_mixed_formats.ncml],[dods],[agg/joinNew_mixed_grid_arr_hslab_0],[[ dsp_band_1.dsp_band_1[0][512][0:1023] ]])
dnl AT_RUN_BES_AND_COMPARE([agg/joinNew_mixed_formats.ncml],[dods],[agg/joinNew_mixed_grid_arr_hslab_1],[[ dsp_band_1.dsp_band_1[1][512][0:1023] ]])

dnl Test slices through the heterogeneous formats in one agg by small chunk from each outer dim entry
dnl dsp_band_1.dsp_band_1[0:3][512][500:600]
dnl AT_RUN_BES_AND_COMPARE([agg/joinNew_mixed_formats.ncml],[dods],[agg/joinNew_mixed_grid_arr_hslab_0123],[[ dsp_band_1.dsp_band_1[0:3][512][500:600] ]])


dnl ****************************************************************************
dnl ---- joinExisting Tests

dnl TEMPORARY test that all joinExisting netcdf elements
dnl have ncoords attribute specified on them.
dnl Can be removed when we support auto-calculation
dnl of the member dataset dimensionalities.
dnl NO LONGER NEEDED once we can load in the dimensions explicitly.
dnl AT_ASSERT_PARSE_ERROR([agg/error_joinExisting_1.ncml])

dnl Test that an unparseable unsigned int in ncoords attribute 
dnl is a parse error.  This case is a -1.
AT_ASSERT_PARSE_ERROR([agg/error_joinExisting_2.ncml])

dnl A test of a purely virtual dataset
AT_CHECK_ALL_DAP_RESPONSES([agg/joinExisting_virtual.ncml])

dnl --------------------
dnl Test constraints on the virtual dataset

dnl Evens (stride test)
dnl FIXME DAP4 FAILURES
AT_RUN_BES_AND_COMPARE([agg/joinExisting_virtual.ncml],[dods],[agg/joinExisting_virtual_cons_1],[[ V[0:2:9] ]])

dnl Odds (stride test).  Also tests non-0 start.
AT_RUN_BES_AND_COMPARE([agg/joinExisting_virtual.ncml],[dods],[agg/joinExisting_virtual_cons_2],[[ V[1:2:9] ]])

dnl Interval within both endpoints
AT_RUN_BES_AND_COMPARE([agg/joinExisting_virtual.ncml],[dods],[agg/joinExisting_virtual_cons_3],[[ V[1:1:5] ]])

dnl First elt is in 2nd granule test
AT_RUN_BES_AND_COMPARE([agg/joinExisting_virtual.ncml],[dods],[agg/joinExisting_virtual_cons_4],[[ V[4:1:9] ]])

dnl Skip 2 granules at once test for one elt
AT_RUN_BES_AND_COMPARE([agg/joinExisting_virtual.ncml],[dods],[agg/joinExisting_virtual_cons_5],[[ V[9] ]])

dnl ----------------------------
dnl Fine Grained Boundary Test

dnl Test a new set with fine grained granule size all 1 (boundary condition essentially)
AT_CHECK_ALL_DAP_RESPONSES([agg/joinExisting_virtual_fine.ncml])

dnl Evens Stride 2 for this case
AT_RUN_BES_AND_COMPARE([agg/joinExisting_virtual_fine.ncml],[dods],[agg/joinExisting_fine_cons_1],[[ V[0:2:4] ]])

dnl Odds stride 2
AT_RUN_BES_AND_COMPARE([agg/joinExisting_virtual_fine.ncml],[dods],[agg/joinExisting_fine_cons_2],[[ V[1:2:4] ]])

dnl Full stride test -- make sure we can stride the whole thing (boundary condition)
AT_RUN_BES_AND_COMPARE([agg/joinExisting_virtual_fine.ncml],[dods],[agg/joinExisting_fine_cons_3],[[ V[0:4:4] ]])

dnl Test that two variables with an outer dimension matching the joinDim get aggregated.
AT_CHECK_ALL_DAP_RESPONSES([agg/joinExisting_multi.ncml])

dnl ----------------------------
dnl variableAgg tests

dnl Case for variableAgg with multiple selects out the ones we want
AT_CHECK_ALL_DAP_RESPONSES([agg/joinExisting_varAgg.ncml])

dnl Error check: Make sure that if variableAgg declares a variable, that variable exists!
AT_ASSERT_PARSE_ERROR([agg/joinExisting_varAgg_err_1.ncml])

dnl Error check: Make sure the variable is an Array type or we can't aggregate it
AT_ASSERT_PARSE_ERROR([agg/joinExisting_varAgg_err_2.ncml])

dnl Error check: Make sure if named and existing and Array/Grid, otuer dim matches dimName!
AT_ASSERT_PARSE_ERROR([agg/joinExisting_varAgg_err_3.ncml])

dnl Case where joinExisting and scan are deployed against data files in which the size of 
dnl aggregation dimension differs across the files.
AT_CHECK_ALL_DAP_RESPONSES([agg/joinExist_ugrid_scan.ncml])


dnl ------------------------
dnl NetCDF Checks
dnl Check that NetCDF Array granules can be aggregated

dnl Basic full responses (small datasets)
AT_CHECK_ALL_DAP_RESPONSES([agg/joinExisting_nc.ncml])

dnl constraints pathway
AT_RUN_BES_AND_COMPARE([agg/joinExisting_nc.ncml],[dods],[agg/joinExisting_nc_cons_1],[[ v[0:2:5][1:1] ]])

dnl ------------------------
dnl NetCDF Grid Tests

dnl First a full data response for a Grid, 
dnl (which is viable since the 
dnl sets were created by hand to be small).
AT_CHECK_ALL_DAP_RESPONSES([agg/joinExisting_simple_grid.ncml])

dnl Test constraint on the Grid's inner dimension only.
dnl Both check the stride on different starts
AT_RUN_BES_AND_COMPARE([agg/joinExisting_simple_grid.ncml],[dods],[agg/joinExisting_simple_grid_cons_0],[[ v[1:2:2][0:2] ]])
AT_RUN_BES_AND_COMPARE([agg/joinExisting_simple_grid.ncml],[dods],[agg/joinExisting_simple_grid_cons_1],[[ v[0:2:2][0:2] ]])

dnl Test constraint on both dimensions (middle entry of inner dim x)
AT_RUN_BES_AND_COMPARE([agg/joinExisting_simple_grid.ncml],[dods],[agg/joinExisting_simple_grid_cons_2],[[ v[0:2:2][1:1] ]])

dnl Test selection of just the joinExisting coodinate variable (here time)
AT_RUN_BES_AND_COMPARE([agg/joinExisting_simple_grid.ncml],[dods],[agg/joinExisting_simple_grid_cons_3],[[ time[1:1] ]])

dnl Likewise, select it as a map from the Grid itself.  Note: Returns a Structure.
AT_RUN_BES_AND_COMPARE([agg/joinExisting_simple_grid.ncml],[dods],[agg/joinExisting_simple_grid_cons_4],[[ v.time[1:1] ]])

dnl Select out just the data array.  Will also end up in a Structure.
dnl NOTE: BUG: This is a bug in the Netcdf handler!  It shoes up as an invalid Grid. Ticket 1621
dnl I'll leave the test out until it's fixed...
dnl AT_RUN_BES_AND_COMPARE([agg/joinExisting_simple_grid.ncml],[dods],[agg/joinExisting_simple_grid_cons_5],[[ v.v ]])

dnl Finally a series to pull out each separate granule
AT_RUN_BES_AND_COMPARE([agg/joinExisting_simple_grid.ncml],[dods],[agg/joinExisting_simple_grid_cons_6],[[ v[0:0][0:2] ]])
AT_RUN_BES_AND_COMPARE([agg/joinExisting_simple_grid.ncml],[dods],[agg/joinExisting_simple_grid_cons_7],[[ v[1:1][0:2] ]])
AT_RUN_BES_AND_COMPARE([agg/joinExisting_simple_grid.ncml],[dods],[agg/joinExisting_simple_grid_cons_8],[[ v[2:2][0:2] ]])

dnl Tests of constrained projection of inner dimension map
AT_RUN_BES_AND_COMPARE([agg/joinExisting_simple_grid.ncml],[dods],[agg/joinExisting_simple_grid_cons_9],[[ v.x[0:0] ]])
AT_RUN_BES_AND_COMPARE([agg/joinExisting_simple_grid.ncml],[dods],[agg/joinExisting_simple_grid_cons_10],[[ v.x[1:1] ]])
AT_RUN_BES_AND_COMPARE([agg/joinExisting_simple_grid.ncml],[dods],[agg/joinExisting_simple_grid_cons_11],[[ v.x[2:2] ]])

dnl Test for the other end case of middle to end of map dim.
AT_RUN_BES_AND_COMPARE([agg/joinExisting_simple_grid.ncml],[dods],[agg/joinExisting_simple_grid_cons_12],[[ v[1:2][1:2] ]])

dnl Test the scan@ncoords extension.  Scan chosen to match the above tests in output.
AT_CHECK_ALL_DAP_RESPONSES([agg/joinExist_scan_ncoords.ncml])

dnl ----------------------------------------------------
dnl Metadata Addition Tests

dnl Test that we can add metadata to the aggregated map vectors
dnl by explicitly poking the autogenerated coordinate variable.
AT_RUN_BES_AND_COMPARE([agg/joinExist_grid_add_meta.ncml],[ddx],[agg/joinExist_grid_add_meta])

dnl Add an attribute container test
AT_RUN_BES_AND_COMPARE([agg/joinExist_grid_add_cont_meta.ncml],[ddx],[agg/joinExist_grid_add_cont_meta])

dnl Modify an existing attribute
AT_RUN_BES_AND_COMPARE([agg/joinExist_grid_mod_meta.ncml],[ddx],[agg/joinExist_grid_mod_meta])

dnl Make sure placeholder type mismatch is a parse error
AT_ASSERT_PARSE_ERROR([agg/joinExist_grid_meta_err_1.ncml])

dnl TODO Add HDF4 tests on canned datasets that are easy to test


dnl Test the loading of the dimension sizes (missing ncoords) 
dnl by querying the DDX for each granule 
AT_CHECK_ALL_DAP_RESPONSES([agg/joinExisting_load_ncoords.ncml])

dnl Also check that specifying the granules with a scan
dnl without a scan@ncoords also produces the correct behavior.
AT_CHECK_ALL_DAP_RESPONSES([agg/joinExist_scan.ncml])

dnl ---- end joinExisting Tests
dnl ****************************************************************************


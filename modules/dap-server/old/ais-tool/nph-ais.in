#!@PERL@ -T
# -*- Perl -*-

# This file is part of libdap, A C++ implmentation of the OPeNDAP Data
# Access Protocol.

# Copyright (c) 2002,2003 OPeNDAP, Inc.
# Author: James Gallagher <jgallagher@opendap.org>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# You can contact OPeNDAP, Inc. at PO Box 112, Saunderstown, RI. 02874-0112.
 
# Make sure that the path after the `#!' at the start of this file is the
# path to Perl on your system. If there are several versions of perl, make
# sure this points to a perl that is at least version 5.004.

# Options: -T: use Perl's taint mode.
#
# $Id$

# Force PATH. This should work for most UNIXs. Forcing PATH means that -T
# (taint) won't complain about running programs. Perl will consider any
# directory that's writeable by someone other than the owner as tainted, so
# adding, for example, /usr/local/bin here might break other operations
# (places where we use exec or system in DODS_Dispatch or DODS_Cache). 
$ENV{PATH} = '/bin:/usr/bin:@prefix@/bin';
$ENV{IFS} = "" if $ENV{IFS} ne ""; # For the truly paranoid...

# Needed for Perl 5.6.0 on Linux 12/11/2000 jhrg
$ENV{BASH_ENV} = '';

# Configuration.
my $debug = 0;
my $ais_database = "/home/jimg/DODS-trunk/etc/ais_demo_3.2003_3.xml";
my $contact = "jgallagher\@opendap.org";

my $object;
my $url;

my $DODS_Admin = "DODS user support coordinator at: ";

sub print_dods_error {
    my $msg = shift;

    my $whole_msg = "${msg}\nPlease report to ${contact}";;

    print "HTTP/1.0 200 OK\n";
    print "XDODS-AIS-Server: 0.1";
    my $time = gmtime;
    print "Date: $time GMT\n";
    print "Last-Modified: $time GMT\n";
    print "Content-type: text/plain\n";
    print "Content-Description: dods_error\n";
    print "Cache-Control: no-cache\n\n";

    print "Error {\n";
    print "    code = 0;\n";
    print "    message = \"$whole_msg\";\n";
    print "};";

    my $date = localtime;
    print(STDERR "[$date] DODS Server error: ", $msg, "\n");
}

# Test if variables are tainted.
# From Programming Perl, p.258. 12/11/2000 jhrg
sub is_tainted {
    not eval {
	join("",@_), kill 0;	# Perl warns about join; don't listen to it.
	1;
    };
}

sub is_directory {
    return -d $_[0];
}

sub is_file {
    return -f $_[0];
}

my $path_info = $ENV{PATH_INFO};
print(STDERR "\nPATH_INFO: ", $path_info, "\n") if $debug > 1;

my $ce = $ENV{QUERY_STRING};
print(STDERR "QUESRY_STRING: ", $ce, "\n") if $debug > 1;

# Figure out which object we're being asked for and get the un-adorned URL.

# Using a pattern match followed substring assignment 'untaints a variable
# (see Programming Perl, p.358.).
if ($path_info =~ /^.*(help|version|stats)(\/?)$/) {
    $object = $1;
    &print_dods_error("Help, Version and Stats not supported.");
    exit(1);
}
# Special case URLs for directories. 1/3/2001 jhrg
# Use PATH_TRANSLATED for the directory test. 7/13/2001 jhrg
elsif (&is_directory($ENV{PATH_TRANSLATED})) {
    $object = "directory";
    &print_dods_error("Directory access not supported.");
    exit(1);
}
# Extract URL and object. Strip off leading slash (/).
elsif ($path_info =~ m@^/(.*)\.(.*)$@) {
    $url = $1;
    $object = $2;
}
else {
    print(STDERR "nph-ais: ", $url, ", ", $object, " \n") if $debug > 1;
    &print_dods_error("Bad characters in the URL's extension.");
    exit(1);
}

if ($object eq "das") {
    $object = "-a";
}
elsif ($object eq "dds") {
    $object = "-s";
}
elsif ($object eq "dods") {
    $object = "-D";
}

print(STDERR "object: ", $object, "\n") if $debug > 1;
print(STDERR "url: ", $url, "\n") if $debug > 1;

my @command = ("./ais_tool", "-B", $ais_database, $object, $url, "-e", $ce);
print(STDERR "Command: @command\n") if $debug > 1;

if ($command[0] ne "") {		# if no error...
    exec(@command); 
    print(STDERR "Couldn't exec '@command': $!\n");
    &print_dods_error("Couldn't exec '@command': $!");
    exit(1);
} 
else {
    &print_dods_msg("Could not execute the command: @command");
}

# $Log: nph-ais,v $
# Revision 1.2  2003/03/14 20:02:48  jimg
# Added CE; This is passed to ais_tool. The AISDODSFilter object parses it from
# the command line options.
#
# Revision 1.1  2003/03/13 23:37:32  jimg
# Added.
#

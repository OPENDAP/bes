import argparse as ap
import os
import shutil
import subprocess
import sys


def clean_im_files(choice):
    if(choice!=1 and choice!=2):
        if(choice == 0):
            print("Testing step 4. Remove all the intermediate testing files.\n")
        subprocess.run(["rm","-rf","d_int.h5"])
        subprocess.run(["rm","-rf","d_int.h5.dmrpp"])
        subprocess.run(["rm","-rf","grid_1_2d.h5"])
        subprocess.run(["rm","-rf","grid_1_2d.h5.dmrpp"])
        subprocess.run(["rm","-rf","grid_1_2d_missing.h5"])

parser = ap.ArgumentParser(description='Patch dmrpp files to ensure the values of all variables can be located.')
parser.add_argument("-v","--verbosity",type=int, choices=[0,1,2],
                     help='Value=0, more output messages. '
                          'Value=1, also keep intermediate files. '
                          'Value=2, also output verbose messages generated by the patch python program..')
args = parser.parse_args()

# Copy the testing data
# To avoid the interactive copy. Here I obtain the system cp.
# May also use shutil copy files if having more tests
OSCP=shutil.which("cp")
if(args.verbosity is not None): 
    print("\nTesting step 1. Copying all the files necessary for testing to the current directory.")

ret=subprocess.run([OSCP,"-rf","test_data/d_int.h5","."])
ret=subprocess.run([OSCP,"-rf","test_data/d_int.h5.dmrpp","."])
ret=subprocess.run([OSCP,"-rf","test_data/grid_1_2d.h5","."])
ret=subprocess.run([OSCP,"-rf","test_data/grid_1_2d.h5.dmrpp","."])
if ret.returncode!=0:
    print("Cannot copy the testing data correctly, stop.")
    clean_im_files(args.verbosity)
    sys.exit(1)

# Run the testing program.
patch_all_verbose_choice = 0
if(args.verbosity is not None): 
    print("Testing step 2. Run the python script that patches all the testing dmrpp files.")
    if(args.verbosity == 2):
        patch_all_verbose_choice = 2

if(args.verbosity is not None and patch_all_verbose_choice == 2): 
    print("------ Coming to the patch program -------")
    ret=subprocess.run(["python","./patch_all.py","-v",str(patch_all_verbose_choice)])
else:
    ret=subprocess.run(["python","./patch_all.py"])
if ret.returncode!=0:
    print("The testing program doesn't run successfully, stop.")
    clean_im_files(args.verbosity)
    sys.exit(1)

# Now check the output
# Case 1: d_int.h5.dmrpp doesn't have missing variable values. 
#         It should not be changed.
if(args.verbosity is not None): 
    print("Testing step 3. Check the testing results: \n")
ret=subprocess.run(["diff","d_int.h5.dmrpp","test_data/d_int.h5.dmrpp"])
if ret.returncode!=0:
    print("d_int.h5.dmrpp should not be changed, stop.")
    clean_im_files(args.verbosity)
    sys.exit(1)

if(args.verbosity is not None): 
    print("  T3.1: For dmrpp files that don't have missing variable values: the test gets passed.")

#Case 2: grid_1_2d.h5.dmrpp, the missing variable value location is provided.
#To test, we need to figure out 
# (1) If the location is correct.
# (2) If the chunk info is the same as the expected output.
cur_dir=os.getcwd()
#print(cur_dir)
dmrpp_file = open("grid_1_2d.h5.dmrpp",'r')
dmrpp_text = dmrpp_file.read()
dmrpp_file.close()
new_dir="/testdir"
dmrpp_text = dmrpp_text.replace(cur_dir,new_dir)
#print(dmrpp_text)
dmrpp_file = open("grid_1_2d.h5.dmrpp",'w')
dmrpp_file.write(dmrpp_text)
dmrpp_file.close()
ret=subprocess.run(["diff","grid_1_2d.h5.dmrpp","test_data/grid_1_2d.h5.patched.dmrpp"])
if ret.returncode!=0:
    print("grid_1_2d.h5.dmrpp is not patched as expected, stop.")
    clean_im_files(args.verbosity)
    sys.exit(1)
if(args.verbosity is not None): 
    print("  T3.2: For dmrpp files that have missing variable values: the test gets passed. \n")

clean_im_files(args.verbosity)
print("Tests succeed. All tests get passed.")





I. Short version 

1. Overview
This whole package can patch the missing value information in a dmrpp file. 
The output of the package is a modified dmrpp file,which includes the 
information on where to fetch the missing values in a separate HDF5 file. 

The main programs are written in C++ to detect if a dmrpp file has missing 
value information and patch this file if necessary.
besstandalone, build_dmrpp and BES's HDF5 CF module, file netCDF module are 
needed to generate the HDF5 file that stores the missing variable values.
Several python scripts are written to facilite the above programs and modules 
to patch the dmrpp. 

A simple python testing scripts as well as the testing HDF5 and the 
corresponding dmrpp files are provided.

This package also includes python scripts to generate dmrpp files based on 
HDF5 files, which is just like the get_dmrpp script. Also two "helper" pythons 
scripts are provided.

2. Usage
Suppose you have several HDF5 and the corresponding dmrpp files under this 
directory, just run
python ./patch_all.py 
This will check and patch all dmrpp files. The HDF5 files that store the missing 
values are also generated.
python ./patch_one_dmrpp.py -i dmrpp-file-name
will check and patch one dmrpp file.

Verbose and other options of patch_all.py and patch_one_dmrpp.py can be found from
the python scripts' helper message.

3. Tests
Run python ./test_patch.py 
will test the package. Verbose option of the python script is also provided.
The testing data is under the directory test_data.

4. Required files to patch dmrpp
check_dmrpp_out.cc, merge_dmrpp.cc, patch_all.py(or patch_one_dmrpp.py),
add_path_besconf.py, gen_miss_vars_bescmd.py, bes.conf.template,   
template.bescmd,template-dmr.bescmd are required.

5. Helper python scripts
gen_all_dmrpp.py, gen_one_dmrpp.py and gen_dmr_bescmd.py can be used to generate
dmrpp files if HDF5 files are provided. 
Note: bes.conf.template,template-dmr.bescmd and add_path_besconf.py are used 
by these scripts.
check_required_prog.py can be used to check if the required BES programs are 
present.
clean_IM_files.py can be used to clean up the intermediate files.

6. For the procedure on how the dmrpp file is patched, check the flow chart on 
the PDF file Add_missing_info.pdf.

II. Detailed version

1. Purpose 
Dmrpp files may miss some variable value information. The C++ programs 
and python scripts under this directory are used to automatically patch 
those missing variable value information to original dmrpp files.

2. What's inside
1) There are two C++ programs. check_dmrpp and merge_dmrpp. 
check_dmrpp checks if a dmrpp file contains any varible that misses the 
data value information.
merge_dmrpp merges the missing data value information to the original 
dmrpp file. 
2) There are a few python scripts, bes configuration and xml template files
that are used to automatically patch a dmrpp file or all dmrpp files under 
this directory. 
patch_all.py is the main program that can automatically patch all dmrpp files
under this directory. The program checks if the number of dmrpp files is
the same as the number of HDF5 files and stops if the number doesn't match.

patch_one_dmrpp.py can be used to patch one dmrpp file. 

Two python scripts listed below can be used to generate the original 
dmrpp files if they are not available.
gen_all_dmrpp.py is used to generate all dmrpp files.  
gen_one_dmrpp.py is used to generate one dmrpp file.

We also provide two python scripts to help users.
check_required_prog.py can be used to check if the necessary python version,
bes modules and bes executables are available to patch dmrpp files.
clean_IM_files.py can be used to clean all intermediate files geneated by 
the patching dmrpp programs. 

3) Testsuite
A simple testsuite test_patch.py is provided. 
All the testing data can be found under /test_data.

3. Detailed explanation
1) Prerequiste programs
The package requires BES is installed in the system and python version is 
at least 3.7.3.
If you are not sure if this is for your system, run the following command:
python ./check_required_prog.py
You should see "All required programs are present." if successful.

2) Running the testing program
python ./test_patch.py
You should see the message "Tests succeed. All tests get passed.". 
Two HDF5 files(d_int.h5 and grid_1_2d.h5) and their dmrpp files are provided 
under /test_data.
d_int.h5.dmrpp doesn't have any missing variable values. 
grid_1_2d.h5.dmrpp misses the variable value information of variable 
lat and lon.
The patched dmrpp file and the hdf5 file that stores the missing values are 
also provided under /test_data.

To see more output messages of the testing program, 
one can run with -v option such as:
python ./test_patch.py -v 0

3) Illustration on how a dmrpp file is patched 
3.1) Check the flow chart in the PDF file Add_missing_info.pdf.

3.2) A BES configuration template file(bes.conf.template) is provided.
The path of Hyrax's HDF5 handler and fileout netCDF module will be added by
python script add_path_besconf.py. Proper HDF5 handler and fileout netCDF 
configuration options are set by corresponding BES keys in the file
bes.conf.template.

3.3) Two xml files template.bescmd and template-dmr.bescmd are necessary to 
generate the HDF5 file that stores the missing variable values.  

4) How to patch dmrpp Files

4.1) Patch all dmrpp Files under the directory

To patch all dmrpp files under a directory, in addition to the 
prerequiste programs, the HDF5 file and the corresponding dmrpp files should 
all be present under this directory. 
run
python ./patch_all.py 
You should see "Successfully patch all dmrpp files under this directory.".
Several options are also provided to show verbose messages or to add user's 
dmrpp file path.

For example,
python ./patch_all.py -v 0 -p data/dmrpp

4.2) Patch one dmrpp file 

Run 
python ./patch_one_dmrpp.py -i dmrpp-file-name
The other options are similar to 4.1). 

5) Python scripts to generate dmrpp files
In case one needs to generate the dmrpp files first, two python scripts 
are provided. It uses some other python scripts, BES configuration 
and xml files under the same directory. 

To generate the corresponding dmrpp files for all HDF5 files under this 
directory, run
python ./gen_all_dmrpp.py 
or
If you want to add the URL or path to the generated dmrpp files. Run
python ./gen_all_dmrpp.py -u data/dmrpp 
where the data/dmrpp is your path.

To generate the dmrpp file of one HDF5 file, run
python ./gen_one_dmrpp.py -i the-HDF5-file-name 
or 
python ./gen_one_dmrpp.py -i the-HDF5-file-name -u the-URL-or-the-path


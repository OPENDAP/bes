#!/usr/bin/env python3
import os
import shutil
import string
import subprocess
import sys
import argparse as ap


def get_obj_name(full_path):
    last_forward_pos = full_path.rfind('/')
    if (last_forward_pos == -1):
        print("Cannot find the file:", full_path, "in the current directory.")
        return ""
    else:
        return full_path[last_forward_pos + 1:]


def get_obj_path(full_path):
    last_forward_pos = full_path.rfind('/')
    if (last_forward_pos == -1):
        print("Cannot find the file:", full_path, "in the current directory.")
        return ""
    else:
        return full_path[0:last_forward_pos + 1]


def is_program_present(p_name):
    # Check whether `p_name` is on PATH and marked as executable.
    return shutil.which(p_name) is not None


def check_required_programs():
    # Sanity check if the necessary programs exist
    # besstandalone and build_dmrpp must exist 
    has_standalone_and_build_dmrpp = \
        is_program_present('besstandalone') and is_program_present('build_dmrpp')

    if (has_standalone_and_build_dmrpp == False):
        print("Either besstandalone or build_dmrpp is missing. ")
        print("They are required to continue, stop!")

    return has_standalone_and_build_dmrpp


def search_system_conf():
    if (os.path.isfile("/etc/bes.conf")):
        return "/etc/bes/bes.conf"
    else:
        besstandalone_path = shutil.which('besstandalone')
        cut_string_len = len("bin/besstandalone")
        besstandalone_parent_path = besstandalone_path[:-cut_string_len]
        bes_conf_full_path = besstandalone_parent_path + "etc/bes/bes.conf"
        return bes_conf_full_path


# Obtain the BES configuration file installed in the system(server).
def obtain_bes_sys_conf_file(user_conf):
    # Check if the bes configuration file exists.
    bes_conf_name = ''
    if (user_conf is not None):
        bes_conf_name = user_conf
    else:
        bes_conf_name = search_system_conf()
        if (bes_conf_name == ''):
            print("The system doesn't provide the BES configuration file. Check if the Hyrax is installed.")

    if (bes_conf_name != '' and os.path.isfile(bes_conf_name) != True):
        print("The BES configuration file", bes_conf_name, "doesn't exist.")

    return bes_conf_name


def generate_bes_sys_conf_file(user_conf, bes_system_conf):
    bes_conf_name = ''
    if (user_conf is not None):
        bes_conf_name = user_conf
    else:
        bes_system_conf_name = get_obj_name(bes_system_conf)
        temp_bes_conf_path = "/tmp/" + bes_system_conf_name
        if os.path.exists(temp_bes_conf_path):
            os.remove(temp_bes_conf_path)
        shutil.copyfile(bes_system_conf, temp_bes_conf_path)
        os.chmod(temp_bes_conf_path, 0o644)
        with open(temp_bes_conf_path, "a") as tempfile:
            tempfile.write("\n");
            tempfile.write("H5.EnableCF=false")
        bes_conf_name = temp_bes_conf_path
        dest_obj_path = get_obj_path(temp_bes_conf_path)
        dest_module_path = dest_obj_path + "modules"
        src_obj_path = get_obj_path(bes_system_conf)
        src_module_path = src_obj_path + "modules"
        if (os.path.exists(dest_module_path) == False):
            shutil.copytree(src_module_path, dest_module_path)
    return bes_conf_name


# The function module_exist() checks if the module file exists.
def module_exist(module_path):
    return (os.path.isfile(module_path) == True)


# The function add_module_path() adds the module path
def add_module_path(f_str, conf_mod_name, mod_path):
    index = f_str.find(conf_mod_name) + len(conf_mod_name)
    if (f_str[index] != '\n'):
        print(conf_mod_name)
        print(f_str[index])
        print("The module path should be empty.")
        sys.exit(1)
    temp_text = f_str[:index] + mod_path + f_str[index:]
    return temp_text


# Generate the temporary BES configuration file.
def generate_tmp_bes_conf_file(user_conf,is_cf,out_conf):
    bes_conf_name = ''
    if (user_conf is not None):
        bes_conf_name = user_conf
    else:
        bes_cmd = 'besstandalone'
        locate = shutil.which(bes_cmd)
        # print(locate)

        # Remove the end characters, bin/besstandalone
        locate_par_dir = locate[:len(locate) - 17]
        # print(locate_par_dir)

        locate_lib_path = locate_par_dir
        if (locate_par_dir == '/usr/'):
            if (os.path.isfile('/usr/lib64/bes/libdap_module.so') == True):
                locate_lib_path = '/usr/lib64/bes/'
            else:
                locate_lib_path = '/usr/lib/bes/'
        else:
            locate_lib_path = locate_par_dir + 'lib/bes/'

        libdap_path = locate_lib_path + 'libdap_module.so'
        libdap_xml_path = locate_lib_path + 'libdap_xml_module.so'
        libhdf5_path = locate_lib_path + 'libhdf5_module.so'

        # debugging
        # libfakepath='fake.so'
        has_all_modules = module_exist(libdap_path) and module_exist(libdap_xml_path) \
                          and module_exist(libhdf5_path)
        if (has_all_modules == False):
            print("Some required modules don't exist; cannot generate the bes configuration file.")
            print("You may try the option -s to see if the system-provided BES configuration file works for you.")
            print("You may also try the option -u by providing your own BES configuration file.")
            sys.exit(1)

        if (out_conf is not None):
            bes_conf_name=out_conf
        else:
            bes_conf_name= "bes.tmp.conf";
        bes_tmp_conf_str='''BES.LogName=./bes.log
BES.modules=dap,cmd,h5
BES.module.dap=
BES.module.cmd=
BES.module.h5=
BES.Catalog.catalog.RootDirectory=
BES.Data.RootDirectory=/dev/null
BES.Catalog.catalog.TypeMatch=h5:.*\.(h5|he5|HDF5)(\.bz2|\.gz|\.Z)?$;
BES.Catalog.catalog.Include=;
BES.Catalog.catalog.Exclude=^\..*;
BES.FollowSymLinks=Yes
BES.Catalog.catalog.FollowSymLinks=Yes
BES.UncompressCache.dir=/tmp
BES.UncompressCache.prefix=uncompress_cache
BES.UncompressCache.size=500
'''
        if (is_cf is True):
            bes_tmp_conf_str = bes_tmp_conf_str + "H5.EnableCF=true"
        else:
            bes_tmp_conf_str = bes_tmp_conf_str + "H5.EnableCF=false"
        print(bes_tmp_conf_str)
        temp_text = add_module_path(bes_tmp_conf_str, "BES.module.dap=", libdap_path)
        temp_text = add_module_path(temp_text, "BES.module.cmd=", libdap_xml_path)
        temp_text = add_module_path(temp_text, "BES.module.h5=", libhdf5_path)
        cur_dir = os.getcwd()
        temp_text = add_module_path(temp_text, "BES.Catalog.catalog.RootDirectory=", cur_dir)

        # print(bes_tmp_conf_str)
        # print(temp_text)
        bc_fid = open(bes_conf_name, 'w')
        bc_fid.write(temp_text)
        bc_fid.close()

    return bes_conf_name


# Check if the HDF5 file is present.
def obtain_hdf5_full_path(hdf5_name):
    if '/' not in hdf5_name:
        hdf5_name = os.getcwd() + '/' + hdf5_name
    elif hdf5_name[0] != '/':
        print("Please provide the absolute path name for the HDF5 file such as /tmp/foo.hdf")
        hdf5_name = ''
    if (os.path.isfile(hdf5_name) != True):
        print("The hdf5 file:", hdf5_name, "doesn't exist.")
        hdf5_name = ''
    return hdf5_name


# Generate the bescmd file content.
def generate_bescmd_contents(bes_conf_name, hdf5_name):
    # Obtain the HDF5 file path in the bescmd file that uses to generate the dmr file

    bescmd_str = ''
    bes_conf_fid = open(bes_conf_name, 'r')
    bes_conf_text = bes_conf_fid.read()
    bes_conf_fid.close()
    bes_catalog_root_dir_str = "BES.Catalog.catalog.RootDirectory="
    catalog_root_dir_index = bes_conf_text.find(bes_catalog_root_dir_str)
    if (catalog_root_dir_index == -1):
        print("Cannot find the catalog root directory from the bes configuration file: ", bes_conf_name)
        return bescmd_str

    catalog_root_dir_endline_index = bes_conf_text.find('\n', catalog_root_dir_index)
    catalog_root_dir = bes_conf_text[
                       catalog_root_dir_index + len(bes_catalog_root_dir_str):catalog_root_dir_endline_index]

    if (hdf5_name.find(catalog_root_dir) != 0):
        print("The HDF5 file:", hdf5_name, "is not on the path", catalog_root_dir)
        print("Please put the HDF5 file under the hyrax root catalog directory")
        return bescmd_str

    # obtain the hdf5 file path that needs to be inside the xml file. 
    hdf5_name_path = hdf5_name[len(catalog_root_dir):]

    # Generate the bescmd file

    # The first part of the xml string
    bescmd_str_p1 = '''<?xml version="1.0" encoding="UTF-8"?>
<request reqID="some_unique_value" >
    <setContext name="dap_format">dap2</setContext>
    <setContainer name="data" space="catalog">'''
    bescmd_str_p1 = bescmd_str_p1 + hdf5_name_path + "</setContainer>"
    bescmd_str_p2 = '''
    <define name="d">
        <container name="data" />
    </define>
    <get type="dmr" definition="d" />
</request>'''
    bescmd_str = bescmd_str_p1 + bescmd_str_p2
    # print(bescmd_str)
    return bescmd_str


# Create by KY 2024-04-01
# We use python 3.6.8.It must be >=python 3.6
if sys.version_info <= (3, 6):
    print("The tested version is python 3.6, your version is lower.")
    sys.exit(1)

parser = ap.ArgumentParser(
    description='Build a dmrpp file for an HDF5 file. get_dmrpp_h5 -i h5_file_name. A dmrpp file that uses the HDF5 file name will be generated.')
parser.add_argument("-i", nargs=1,
                    help='The HDF5 file name should be provided under the current directory. and the file should be under the appropriate data directory. ',
                    required=True)
parser.add_argument("-C", "--EnableCF", action='store_true',
                    help='Use the EnableCF option of the HDF5 handler. Check -v for details.')
parser.add_argument("-c", "--conf",
                    help='Optional parameter: the bes configuration file including the path: /etc/bes.conf. Check -v for details. ')
parser.add_argument("-s", "--system_conf", action='store_true',
                    help='Use the BES configuration provided by the current System. The HDF5 file should be under the appropriate data directory. Check -v for details.')
parser.add_argument("-u", "--data_url",
                    help='Optional parameter: the value of attribute dmrpp:href in the dmrpp file. If not provided, OPeNDAP_DMRpp_DATA_ACCESS_URL will be used by system.')
parser.add_argument("-v","--verbosity", action='store_true',
                    help='Detailed description message and other information.' )
parser.add_argument("-o","--out_conf", 
                    help='Optional parameter: A BES configuration file will be generated with the name the user specifies. Check -v for details. ')

args = parser.parse_args()
hdf5_name = ''.join(args.i)

if (args.verbosity is True):
    desc_str = '''
    Given an HDF5 file, running this python script will generate the corresponding dmrpp file.

    The prerequisite besstandalone and build_dmrpp executables should be found under the user's current environment.
    besstandalone is used to generate the HDF5 dmr file by the HDF5 handler. build_dmrpp is the main C++ program that builds the dmrpp for the HDF5 file.

    By default, a temporary BES configuration file will be created to use for generation of the dmr. It will be deleted before the end of this program. 
    One can use -C option to generate the dmr file by using the EnableCF option in the HDF5 handler.
    If the default way does not work for you, you can try the -s option to let the program check if it can use the BES configuration file provided by the system.
         To use this option, the file name bes.conf will be searched to see if it is under /etc/bes, this is the common place for the rpm installation.
         If still not found, it will search this file according to the path of besstandalone.
         The HDF5 file should be provided somewhere under the directory specified by BES.Catalog.catalog.RootDirectory inside the bes configuration file.

    If the above option doesn't work either, the user can provide the name and the path of the BES configuration file like /tmp/bes.conf by using the -c option.
    The HDF5 file should also be provided somewhere under the directory specified by BES.Catalog.catalog.RootDirectory inside the bes configuration file.
  
    Users can provide either the file or the absolute path of the HDF5 file.

    Users can use the -u option to provide the url or the path of the HDF5 file that will be stored inside the generated dmrpp file. If not, the string OPeNDAP_DMRpp_DATA_ACCESS_URL will be used. 

    Users can use the -o option to keep the temporary BES configuration file for future use. Users should provide the temporary BES configuration file name. 
    The intention for this option is to avoid creating a temporary BES configuration file each time a dmrpp file is generated. However, users should use this BES configuration file under
    the current directory and with the current Hyrax besstandalone and build_dmrpp programs.

    The HDF5 file name is used for the final dmrpp file name such as tmp.hdf.dmrpp for tmp.hdf.
    The dmrpp file will be generated under the current directory that runs this python script.

    get_dmrpp_h5 -i h5_file_name    (The HDF5 file should be put under the current directory)
    get_dmrpp_h5 -C -i h5_file_name    (The HDF5 file should be put under the current directory and the dmrpp file is generated by the EnableCF option of the HDF5 handler)
    get_dmrpp_h5 -s -i h5_file_name (The HDF5 file must be put under the appropriate directory specified by the system's BES configuration file)
    get_dmrpp_h5 -i h5_file_name -c user_bes_conf  (The HDF5 file must be put under the appropriate directory specified by the user's BES configuration file)
    get_dmrpp_h5 -i h5_file_name -u user_provided_url_to_h5_file 
    get_dmrpp_h5 -i h5_file_name -o user_bes_conf  (The HDF5 file should be put under the current directory; a BES configuration file will be generated in addition to the dmrpp file.)
    '''
    print(desc_str)

# Sanity check to see if the necessary programs exist
if (check_required_programs() == False):
    sys.exit(1)

# Generate the bes conf.
bes_conf_name = ''

if (args.system_conf is True):
    # Obtain the system BES configuration file
    bes_system_conf_name = obtain_bes_sys_conf_file(args.conf)
    if (bes_system_conf_name == ""):
        sys.exit(1)

    # Generate the temporary BES configuration file
    bes_conf_name = generate_bes_sys_conf_file(args.conf, bes_system_conf_name)
else:
    bes_conf_name = generate_tmp_bes_conf_file(args.conf,args.EnableCF, args.out_conf)

# Print BES configuration file name and contents with the verbose option.
if (args.verbosity is True):
    print("BES configuration file name:", bes_conf_name)

if (args.verbosity is True and args.system_conf is False):
    bc_fid = open(bes_conf_name, 'r')
    bc_text = bc_fid.read()
    print("The BES configure file content: ")
    print(bc_text)
    bc_fid.close()

# Obtain the HDF5 full path
hdf5_full_path = obtain_hdf5_full_path(hdf5_name)
if (hdf5_full_path == ""):
    sys.exit(1)

# Print the HDF5 file path if the verbose option is on.
if (args.verbosity is True):
    print('\n')
    print("The HDF5 file full path :", hdf5_full_path)

# Generate the dmr bescmd content for this HDF5 file.
bescmd_str = generate_bescmd_contents(bes_conf_name, hdf5_full_path)
if (bescmd_str == ""):
    sys.exit(1)
elif (args.verbosity is True):
    print('\n')
    print("The bescmd xml for generating the dmr:")
    print(bescmd_str)

# Obtain the HDF5 file name that excludes the path.
hdf5_name_cur_dir = get_obj_name(hdf5_full_path)

# Generate the HDF5 dmr bescmd file.
hdf5_file_bescmd = hdf5_name_cur_dir + ".dmr.bescmd"
with open(hdf5_file_bescmd, 'w') as f:
    f.write(bescmd_str)

# Generate the HDF5  dmr file
hdf5_dmr_name = hdf5_name_cur_dir + ".dmr"
ret = subprocess.run(["besstandalone", "-c", bes_conf_name, "-i", hdf5_file_bescmd, "-f", hdf5_dmr_name])
if ret.returncode != 0:
    print("Besstandalone fails to generate the HDF5 dmr file. ")
    print("The HDF5 file name is:  ", hdf5_full_path)
    print("Stop. ")
    sys.exit(1)

hdf5_url = "OPeNDAP_DMRpp_DATA_ACCESS_URL"
if (args.data_url is not None):
    hdf5_url = args.data_url

ret = subprocess.run(["build_dmrpp", "-f", hdf5_full_path, "-r", hdf5_dmr_name, "-u", hdf5_url, "-M"],
                         stdout=subprocess.PIPE, universal_newlines=True)
if ret.returncode != 0:
    print("build_dmrpp fails to generate the HDF5 dmrpp file. ")
    print("The HDF5 file name is:  ",hdf5_full_path)

    # Remove the temporary dmr and bescmd files.
    subprocess.run(["rm", "-rf", hdf5_dmr_name])
    subprocess.run(["rm", "-rf", hdf5_file_bescmd])
    if (args.system_conf is False and args.conf is None):
        subprocess.run(["rm", "-rf", "bes.log"])   
        subprocess.run(["rm", "-rf", "mds_ledger.txt"])
        if (args.out_conf is None):
            subprocess.run(["rm", "-rf", "bes.tmp.conf"])
    print("Stop. ")
    sys.exit(1)

hdf5_dmrpp_name = hdf5_name_cur_dir + ".dmrpp"
with open(hdf5_dmrpp_name, 'w') as f:
    f.write(ret.stdout)

# Remove the temporary dmr and bescmd files.
subprocess.run(["rm", "-rf", hdf5_dmr_name])
subprocess.run(["rm", "-rf", hdf5_file_bescmd])

# Remove the temporary files generated by using the default option
if (args.system_conf is False and args.conf is None):
    subprocess.run(["rm", "-rf", "bes.log"])
    subprocess.run(["rm", "-rf", "mds_ledger.txt"])
    if (args.out_conf is None):
        subprocess.run(["rm", "-rf", "bes.tmp.conf"])


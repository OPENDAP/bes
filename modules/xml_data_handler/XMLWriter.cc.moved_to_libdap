/*
 * XMLWriter.cpp
 *
 *  Created on: Jul 28, 2010
 *      Author: jimg
 */

#include "XMLWriter.h"

#include <libxml/encoding.h>
#include <libxml/xmlwriter.h>

#include <InternalErr.h>

const char *ENCODING = "ISO-8859-1";
const char *DAP_SCHEMA = "http://xml.opendap.org/ns/dap/3.3#";
const int XML_BUF_SIZE = 2000000;

using namespace libdap;

XMLWriter::XMLWriter()
{
    // LIBXML_TEST_VERSION;

    /* Create a new XML buffer, to which the XML document will be
     * written */
    try {
	if (!(d_doc_buf = xmlBufferCreateSize(XML_BUF_SIZE)))
	    throw InternalErr(__FILE__, __LINE__, "Error allocating the xml buffer");

	xmlBufferSetAllocationScheme(d_doc_buf, XML_BUFFER_ALLOC_DOUBLEIT);

	/* Create a new XmlWriter for memory, with no compression.
	 * Remark: there is no compression for this kind of xmlTextWriter */
	if (!(d_writer = xmlNewTextWriterMemory(d_doc_buf, 0)))
	    throw InternalErr(__FILE__, __LINE__, "Error allocating memory for xml writer");

	if (xmlTextWriterSetIndent(d_writer, 4) < 0)
	    throw InternalErr(__FILE__, __LINE__, "Error starting indentation for response document ");

	if (xmlTextWriterSetIndentString(d_writer, (const xmlChar*)"    ") < 0)
	    throw InternalErr(__FILE__, __LINE__, "Error setting indentation for response document ");

	d_started = true;

	/* Start the document with the xml default for the version,
	 * encoding ISO 8859-1 and the default for the standalone
	 * declaration. MY_ENCODING defined at top of this file*/
	if (xmlTextWriterStartDocument(d_writer, NULL, ENCODING, NULL) < 0)
	    throw InternalErr(__FILE__, __LINE__, "Error starting xml response document");

	/* Start an element named "Dataset". Since this is the first element,
	 * this will be the root element of the document */
	if (xmlTextWriterStartElementNS(d_writer, NULL, (const xmlChar*)"Dataset", (const xmlChar*)DAP_SCHEMA)
		< 0)
	    throw InternalErr(__FILE__, __LINE__,  "Error starting the response element for response ");

	/* Add an attribute... */
#if 0
	if( xmlTextWriterWriteAttribute(d_writer, REQUEST_ID, reqid.c_str() ) < 0 )
	throw InternalErr(__FILE__, __LINE__, "Error adding attribute to the Dataset element.");
#endif
    }
    catch (InternalErr &e) {
	m_cleanup();
	throw ;
    }

}

XMLWriter::~XMLWriter()
{
    m_cleanup();
}

void XMLWriter::m_cleanup()
{
    // make sure the buffer and writer are all cleaned up
    if (d_writer) {
	xmlFreeTextWriter(d_writer);
	d_writer = 0;
	d_doc_buf = 0;
    }
    if (d_doc_buf) {
	xmlBufferFree(d_doc_buf);
	d_doc_buf = 0;
    }

    d_started = false;
    d_ended = false;
}

const char *XMLWriter::get_doc()
{
    if (d_writer) {
	// this should end the response element
	if (xmlTextWriterEndElement(d_writer) < 0)
	    throw InternalErr(__FILE__, __LINE__, "Error ending Dataset element.");

	if (xmlTextWriterEndDocument(d_writer) < 0)
	    throw InternalErr(__FILE__, __LINE__, "Error ending the document");

	// must call this before getting the buffer content
	xmlFreeTextWriter(d_writer);
	d_writer = 0;
    }

    // get the xml document as a string and return
    if( !d_doc_buf->content )
	throw InternalErr(__FILE__, __LINE__, "Error retrieving response document as string") ;

    return (char *)d_doc_buf->content;
}

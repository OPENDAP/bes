# Process with autom4te to create an -*- Autotest -*- test suite.


# ------------------------------
#

AT_INIT([bes.cfdmr.conf besstandalone getdap])
# AT_COPYRIGHT([])

AT_TESTED([besstandalone])

# Usage: _AT_TEST_*(<bescmd source>, <baseline file>)

#The first part is for CF option. The testing files are under h5.cf. It is using bes.cfdmr.conf
m4_define([_AT_BESCMD_TEST],   
[AT_SETUP([BESCMD $1])
AT_KEYWORDS([bescmd])

# Use the following AT_CHECK to generate baseline file.
#AT_CHECK([besstandalone -c $abs_builddir/bes.cfdmr.conf -i $1 > $2|| true], [], [stdout], [stderr])

AT_CHECK([valgrind --trace-children=yes --leak-check=full --log-file=valgrind.txt besstandalone -c $abs_builddir/bes.cfdmr.conf -i $1 || true], [], [stdout], [stderr])
AT_CHECK([diff -b -B $2 stdout || diff -b -B $2 stderr], [], [ignore],[],[])
AT_CHECK([cat valgrind.txt >> /tmp/h5.cf.dmr.valgrind.log], [], [ignore],[],[])
AT_CLEANUP])

m4_define([_AT_BESCMD_BINARYDATA_TEST],   
[AT_SETUP([BESCMD $1])
AT_KEYWORDS([bescmd])

# Use the following AT_CHECK to generate baseline file.
#AT_CHECK([besstandalone -c $abs_builddir/bes.cfdmr.conf -i $1 | getdap -M - >$2|| true], [], [stdout], [stderr])

AT_CHECK([valgrind --trace-children=yes --leak-check=full --log-file=valgrind.txt besstandalone -c $abs_builddir/bes.cfdmr.conf -i $1 | getdap -M - || true], [], [stdout], [stderr])
AT_CHECK([diff -b -B $2 stdout || diff -b -B $2 stderr], [], [ignore],[],[])
AT_CHECK([cat valgrind.txt >> /tmp/h5.cf.dmr.valgrind.log], [], [ignore],[],[])
AT_CLEANUP])

m4_define([_AT_BESCMD_DAP4DATA_TEST],
[AT_SETUP([BESCMD $1])
AT_KEYWORDS([bescmd])

# Use the following AT_CHECK to generate baseline file.
#AT_CHECK([besstandalone -c $abs_builddir/bes.cfdmr.conf -i $1 | getdap4 -D -M - > $2|| true], [], [stdout], [stderr])

AT_CHECK([valgrind --trace-children=yes --leak-check=full --log-file=valgrind.txt besstandalone -c $abs_builddir/bes.cfdmr.conf -i $1 | getdap4 -D -M - || true], [], [stdout], [stderr])
AT_CHECK([diff -b -B $2 stdout || diff -b -B $2 stderr], [], [ignore],[],[])
AT_CHECK([cat valgrind.txt >> /tmp/h5.cf.dmr.valgrind.log], [], [ignore],[],[])
AT_CLEANUP])

# Running this macro will generate expected failure on Mac if output is different than the baseline.
# However, if the baseline file on Mac is the same as the output, unexpected pass will show. 
# For other platform, this test is the same as other tests because AT_XFAIL_IF is a no-op.
m4_define([_AT_BESCMD_TEST_OS],   
[AT_SETUP([BESCMD $1])
AT_KEYWORDS([bescmd])

# Use the following AT_CHECK to generate baseline file.
#AT_CHECK([besstandalone -c $abs_builddir/bes.cfdmr.conf -i $1 > $2|| true], [], [stdout], [stderr])
AT_CHECK([valgrind --trace-children=yes --leak-check=full --log-file=valgrind.txt besstandalone -c $abs_builddir/bes.cfdmr.conf -i $1 || true], [], [stdout], [stderr])
AT_CHECK([diff -b -B $2 stdout || diff -b -B $2 stderr], [], [],[],[])
AT_CHECK([cat valgrind.txt >> /tmp/h5.cf.dmr.valgrind.log], [], [ignore],[],[])
AT_XFAIL_IF([grep -q "darwin" <<< AT_PACKAGE_HOST])
AT_CLEANUP])



m4_define([AT_BESCMD_RESPONSE_TEST],
[_AT_BESCMD_TEST([$abs_srcdir/h5.cf/$1], [$abs_srcdir/h5.cf/$1.baseline])
])

m4_define([AT_BESCMD_CFDMR_RESPONSE_TEST],
[_AT_BESCMD_TEST([$abs_srcdir/h5.cf/$1], [$abs_srcdir/h5.cf.dmr/$1.baseline])
])

m4_define([AT_BESCMD_BINARYDATA_RESPONSE_TEST],
[_AT_BESCMD_BINARYDATA_TEST([$abs_srcdir/h5.cf/$1], [$abs_srcdir/h5.cf/$1.baseline])
])

m4_define([AT_BESCMD_DAP4DATA_RESPONSE_TEST],
[_AT_BESCMD_DAP4DATA_TEST([$abs_srcdir/h5.cf/$1], [$abs_srcdir/h5.cf/$1.baseline])
])

m4_define([AT_BESCMD_CFDMR_DAP4DATA_RESPONSE_TEST],
[_AT_BESCMD_DAP4DATA_TEST([$abs_srcdir/h5.cf/$1], [$abs_srcdir/h5.cf.dmr/$1.baseline])
])

m4_define([AT_BESCMD_RESPONSE_TEST_OS],
[_AT_BESCMD_TEST_OS([$abs_srcdir/h5.cf/$1], [$abs_srcdir/h5.cf/$1.baseline])
])

#Now we test the default option. The testing files are under /h5.default, bes.default.conf is used.

m4_define([_AT_BESCMD_TEST_DEFAULT],   
[AT_SETUP([BESCMD $1])
AT_KEYWORDS([bescmd])

# Use the following AT_CHECK to generate baseline file.
#AT_CHECK([besstandalone -c $abs_builddir/bes.default.conf -i $1 > $2|| true], [], [stdout], [stderr])

AT_CHECK([valgrind --trace-children=yes --leak-check=full --log-file=valgrind.txt besstandalone -c $abs_builddir/bes.default.conf -i $1 || true], [], [stdout], [stderr])
AT_CHECK([diff -b -B $2 stdout || diff -b -B $2 stderr], [], [ignore],[],[])
AT_CHECK([cat valgrind.txt >> /tmp/h5.cf.dmr.valgrind.log], [], [ignore],[],[])
AT_CLEANUP])

m4_define([_AT_BESCMD_BINARYDATA_TEST_DEFAULT],   
[AT_SETUP([BESCMD $1])
AT_KEYWORDS([bescmd])

# Use the following AT_CHECK to generate baseline file.
#AT_CHECK([besstandalone -c $abs_builddir/bes.default.conf -i $1 | getdap -M - >$2|| true], [], [stdout], [stderr])

AT_CHECK([valgrind --trace-children=yes --leak-check=full --log-file=valgrind.txt besstandalone -c $abs_builddir/bes.default.conf -i $1 | getdap -M - || true], [], [stdout], [stderr])
AT_CHECK([diff -b -B $2 stdout || diff -b -B $2 stderr], [], [ignore],[],[])
AT_CHECK([cat valgrind.txt >> /tmp/h5.cf.dmr.valgrind.log], [], [ignore],[],[])
AT_CLEANUP])

m4_define([_AT_BESCMD_DAP4DATA_TEST_DEFAULT],
[AT_SETUP([BESCMD $1])
AT_KEYWORDS([bescmd])

# Use the following AT_CHECK to generate baseline file.
#AT_CHECK([besstandalone -c $abs_builddir/bes.default.conf -i $1 | getdap4 -D -M - > $2|| true], [], [stdout], [stderr])

AT_CHECK([valgrind --trace-children=yes --leak-check=full --log-file=valgrind.txt besstandalone -c $abs_builddir/bes.default.conf -i $1 | getdap4 -D -M - || true], [], [stdout], [stderr])
AT_CHECK([diff -b -B $2 stdout || diff -b -B $2 stderr], [], [ignore],[],[])
AT_CHECK([cat valgrind.txt >> /tmp/h5.cf.dmr.valgrind.log], [], [ignore],[],[])
AT_CLEANUP])


m4_define([AT_BESCMD_RESPONSE_TEST_DEFAULT],
[_AT_BESCMD_TEST_DEFAULT([$abs_srcdir/h5.default/$1], [$abs_srcdir/h5.default/$1.baseline])
])

m4_define([AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT],
[_AT_BESCMD_BINARYDATA_TEST_DEFAULT([$abs_srcdir/h5.default/$1], [$abs_srcdir/h5.default/$1.baseline])
])

m4_define([AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT],
[_AT_BESCMD_DAP4DATA_TEST_DEFAULT([$abs_srcdir/h5.default/$1], [$abs_srcdir/h5.default/$1.baseline])
])


##########
# Test generic cases.
AT_BESCMD_RESPONSE_TEST([t_float.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_float.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_float.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_float.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_group_scalar_attrs.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_group_scalar_attrs.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_group_scalar_attrs.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_group_scalar_attrs.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_int.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_int.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_int.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_int.h5.ddx.bescmd])

#netcdf-4 1d, 2d latlon tests, mostly include das and dds.
AT_BESCMD_RESPONSE_TEST([t_2d_2dll.nc4.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_2d_2dll.nc4.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([t_3d_ll_zc.nc4.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_3d_ll_zc.nc4.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([t_3d_ll_nozc.nc4.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_3d_ll_nozc.nc4.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([t_3d_2dll_zc.nc4.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_3d_2dll_zc.nc4.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_3d_2dll_zc.nc4.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_3d_2dll_nozc.nc4.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_3d_2dll_nozc.nc4.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_3d_2dll_nozc.nc4.h5.data.bescmd])

#The following includes netcdf-4 multi-2d latlon tests.
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls_1g.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls_1g.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls_sdim.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls_sdim.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls_special.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls_special.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls_wrongdimorder.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls_wrongdimorder.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls_nocvs.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls_nocvs.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls_za.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_mlls_za.h5.das.bescmd])

#netcdf-4 1-D unlimited dimension tests(size = 0 and size .ne. 0)
AT_BESCMD_RESPONSE_TEST([nc4_unlimited_0.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_unlimited_0.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([nc4_unlimited_0.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_unlimited_1.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_unlimited_1.h5.das.bescmd])

#netcdf-4 enhanced model that have the coordinate attributes
#The current approach is to just flatten the coordinate attribute values
# due to the support of trop-OMI and new OMI level2 products.
# Emulate the new OMI-level 2 product 
AT_BESCMD_RESPONSE_TEST([dim_scale.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([dim_scale.h5.das.bescmd])
# Emulate the new Trop-OMI product 
AT_BESCMD_RESPONSE_TEST([dim_scale2.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([dim_scale2.h5.das.bescmd])
# Check the handling of NAME attributes. "NAME" is removed for coordinate variables 
# and dim. scale variables(they are not always overlapped.)
AT_BESCMD_RESPONSE_TEST([dim_scale2_name.h5.das.bescmd])

#generic cf 1d,2d latlon tests, only include das and dds.
AT_BESCMD_RESPONSE_TEST([t_cf_1dll.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_cf_1dll.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([t_cf_1dllz.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_cf_1dllz.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([t_cf_2dll.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_cf_2dll.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([t_cf_2dllz.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_cf_2dllz.h5.das.bescmd])

# The scalar support.
AT_BESCMD_RESPONSE_TEST([t_scalar_dset.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_scalar_dset.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_scalar_dset.h5.dds.bescmd])

# It loops forever.
AT_BESCMD_RESPONSE_TEST([t_link_comment.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_link_comment.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_link_comment.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_link_comment.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_size8.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_size8.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_size8.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_size8.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_string.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_string.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_string.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_string.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_string_cstr.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_string_cstr.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_string_cstr.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_string_cstr.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_unsigned_int.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_unsigned_int.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_unsigned_int.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_unsigned_int.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_unsupported.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_unsupported.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_unsupported.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_unsupported.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_vl_string.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_vl_string.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_vl_string.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_vl_string.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_vl_string_cstr.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_vl_string_cstr.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_vl_string_cstr.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_vl_string_cstr.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_space_zero.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_space_zero.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_space_zero.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_space_zero.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_space_null.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_space_null.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_space_null.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_space_null.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_special_char_attr.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_special_char_attr.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_special_char_attr.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_special_char_attr.h5.ddx.bescmd])

# Test CF cases.
AT_BESCMD_RESPONSE_TEST([t_flatten.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_flatten.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_flatten.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_flatten.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_flatten_name_clash.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_flatten_name_clash.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_flatten_name_clash.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_flatten_name_clash.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_name_clash.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_name_clash.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_name_clash.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_name_clash.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([t_non_cf_char.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_non_cf_char.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_non_cf_char.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_non_cf_char.h5.ddx.bescmd])

AT_BESCMD_RESPONSE_TEST([t_fillvalue_2d_2x2y.nc4.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_fillvalue_2d_2x2y.nc4.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_fillvalue_2d_2x2y.nc4.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_fillvalue_2d_2x2y.nc4.h5.ddx.bescmd])

AT_BESCMD_RESPONSE_TEST([t_scale_2d_2x2y.nc4.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_scale_2d_2x2y.nc4.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_scale_2d_2x2y.nc4.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_scale_2d_2x2y.nc4.h5.ddx.bescmd])

# Fillvalue out of range.
# Turn off this test for the being because the new
# change in the BES print out the line number of source code.
# This is not desirable since the source code may change from
# time to time and the line number may also get changed.
# Given that this test case really rarely occurs and
# we have a BES key to switch back and forth, the impact
# should be minimum. KY 2016-05-12
#AT_BESCMD_RESPONSE_TEST([t_invalid_fvalue.h5.das.bescmd])

#Test the removal of FakeDims from unsupported datatypes
AT_BESCMD_RESPONSE_TEST([FakeDim_remove.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([FakeDim_remove.h5.dds.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([FakeDim_remove.h5.data.bescmd])

#Test the use of FakeDim dimension names for the same dimension size
AT_BESCMD_RESPONSE_TEST([t_cf_1dll_same_dimsize.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_cf_2dll_same_dimsize.h5.dds.bescmd])


# Test simple HDF-EOS5 cases.
AT_BESCMD_RESPONSE_TEST([grid_1_2d.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_2d.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_2d.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_2d.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_2d_xy.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_2d_xy.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_2d_xy.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_2d_xy.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_3d.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_3x3y.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_3d_3x3y.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_3x3y.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_3x3y.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_xy.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_3d_xy.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_xy.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_xy.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_xyz.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_3d_xyz.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_xyz.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_xyz.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_xyz_aug.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_3d_xyz_aug.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_xyz_aug.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_xyz_aug.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_z.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_3d_z.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_z.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_z.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_zz.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_3d_zz.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_zz.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_1_3d_zz.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_2d.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_2_2d.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_2d.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_2d.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_2d_pixel.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_2_2d_pixel.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_2d_pixel.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_2d_pixel.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_2d_size.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_2_2d_size.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_2d_size.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_2d_size.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_2d_xy.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_2_2d_xy.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_2d_xy.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_2d_xy.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_3d_size.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_2_3d_size.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_3d_size.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_3d_size.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_3d_xyz.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_2_3d_xyz.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_3d_xyz.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_3d_xyz.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_4_2d_origin.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_4_2d_origin.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_4_2d_origin.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_4_2d_origin.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_swath_za_1_2d.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_swath_za_1_2d.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_swath_za_1_2d.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_swath_za_1_2d.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_1_2d_xyz.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([swath_1_2d_xyz.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_1_2d_xyz.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_1_2d_xyz.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_1_3d_2x2yz.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([swath_1_3d_2x2yz.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_1_3d_2x2yz.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_1_3d_2x2yz.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_1_3d_2x2yztd.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([swath_1_3d_2x2yztd.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_1_3d_2x2yztd.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_1_3d_2x2yztd.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_1_2d_xyzz.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([swath_1_2d_xyzz.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_1_2d_xyzz.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_1_2d_xyzz.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_2_2d_xyz.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([swath_2_2d_xyz.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_2_2d_xyz.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_2_2d_xyz.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_2_3d_2x2yz.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([swath_2_3d_2x2yz.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_2_3d_2x2yz.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_2_3d_2x2yz.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_2d_yz.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([za_1_2d_yz.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_2d_yz.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_2d_yz.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_3d_yzt.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([za_1_3d_yzt.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_3d_yzt.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_3d_yzt.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_3d_yztd.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([za_1_3d_yztd.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_3d_yztd.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_3d_yztd.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_3d_yztd_aug.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([za_1_3d_yztd_aug.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_3d_yztd_aug.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_3d_yztd_aug.h5.ddx.bescmd])
AT_BESCMD_RESPONSE_TEST([za_2_2d_yz.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([za_2_2d_yz.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([za_2_2d_yz.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([za_2_2d_yz.h5.ddx.bescmd])

#HDF-EOS5 unlimited reponse(>1 multi-dimensions)
AT_BESCMD_RESPONSE_TEST([swath_unlim.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_unlim.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_unlim.h5.ddx.bescmd])

#HDF-EOS5 extra field cases(the handler will not treat them as HDF-EOS5 files)
AT_BESCMD_RESPONSE_TEST([grid_2_2d_ef.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([grid_2_2d_ef.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_2_3d_2x2yz_ef.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([swath_2_3d_2x2yz_ef.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_2d_yz_ef.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([za_1_2d_yz_ef.h5.dds.bescmd])

#HDF-EOS5 CF "Conventions" attribute group path removed
AT_BESCMD_RESPONSE_TEST([grid_1_2d_convention.h5.das.bescmd])


#big string not ignored(Attributes and < netCDF java limit)
AT_BESCMD_RESPONSE_TEST([t_big_str.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_big_str.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST([t_big_str.h5.dds.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([t_big_str_dset.h5.data.bescmd])

# netcdf4 that only has the dimensional scale.
AT_BESCMD_RESPONSE_TEST([nc4_dscale_only.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_dscale_only.h5.dds.bescmd])

# 2d latlon to support CF if the lat and lon are located
# under the "Geolocation" or the "GeolocationData" group
AT_BESCMD_RESPONSE_TEST([t_cf_geo_grp_2dll.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([t_cf_geo_grp_2dll.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_cf_geo2_grp_2dll.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([t_cf_geo2_grp_2dll.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([t_cf_non_geo_grp_2dll.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([t_cf_non_geo_grp_2dll.h5.dds.bescmd])

#FakeDim pure dimension scale
AT_BESCMD_RESPONSE_TEST([nc4_multi_dscales.h5.dds.bescmd])
#AT_BESCMD_RESPONSE_TEST([nc4_multi_dscales.h5.dmr.bescmd])
AT_BESCMD_CFDMR_RESPONSE_TEST([nc4_multi_dscales.h5.dmr.bescmd])
#wrong fill value type
AT_BESCMD_RESPONSE_TEST([t_wrong_fvalue_type.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([t_wrong_fvalue_type.h5.dds.bescmd])

#nc var dim name same
AT_BESCMD_RESPONSE_TEST([nc4_var_dim_name_same.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_var_dim_name_same.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_var_dim_name_same_2.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_var_dim_name_same_2.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_var_dim_name_same.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_var_dim_name_same.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_var_dim_name_same_2.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_var_dim_name_same_2.h5.dmr.bescmd])

#cf bound
AT_BESCMD_RESPONSE_TEST([t_cf_latlon_bounds.h5.das.bescmd])
AT_BESCMD_RESPONSE_TEST([nc4_group_bounds.h5.das.bescmd])


#Test DAP4 coverage
AT_BESCMD_CFDMR_RESPONSE_TEST([t_cf_1dll.h5.dmr.bescmd])
AT_BESCMD_CFDMR_RESPONSE_TEST([t_cf_2dll.h5.dmr.bescmd])
AT_BESCMD_CFDMR_RESPONSE_TEST([t_cf_2dllz.h5.dmr.bescmd])

# Test subsetting.
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_3d.h5.data.subset.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_3d.h5.data.subset_0.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_3d.h5.data.subset_middle.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_3d.h5.data.subset_last.bescmd])

#CF DAP4 test
#AT_BESCMD_RESPONSE_TEST([grid_1_2d.h5.dmr.bescmd])
#AT_BESCMD_DAP4DATA_RESPONSE_TEST([grid_1_2d.h5.dap.bescmd])
#AT_BESCMD_RESPONSE_TEST([t_int64_dap4.h5.dmr.bescmd])
#AT_BESCMD_DAP4DATA_RESPONSE_TEST([t_int64_dap4.h5.dap.bescmd])

AT_BESCMD_CFDMR_RESPONSE_TEST([grid_1_2d.h5.dmr.bescmd])
AT_BESCMD_CFDMR_DAP4DATA_RESPONSE_TEST([grid_1_2d.h5.dap.bescmd])
AT_BESCMD_CFDMR_RESPONSE_TEST([t_int64_dap4.h5.dmr.bescmd])
AT_BESCMD_CFDMR_DAP4DATA_RESPONSE_TEST([t_int64_dap4.h5.dap.bescmd])


#AT_BESCMD_DAP4DATA_RESPONSE_TEST([grid_1_2d.h5.dap_ce_1.bescmd])
#AT_BESCMD_DAP4DATA_RESPONSE_TEST([grid_1_2d.h5.dap_ce_2.bescmd])



#AT_BESCMD_RESPONSE_TEST([swath_unlim.h5.dmr.bescmd])
AT_BESCMD_CFDMR_RESPONSE_TEST([swath_unlim.h5.dmr.bescmd])

# These tests call a function 'test(<name>)' that does not actually use variables
# from the dataset named in the 'URL,' but does pull attributes from the dataset.
# This tests that the DDS used as an argument to a function does contain attributes.
# ky 11/1/19
AT_BESCMD_RESPONSE_TEST([grid_1_2d.h5.function.ddx.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_2d.h5.function.dods.bescmd])

# This is a platform-specific test. Because the HDF5 library might retrieve object attributes
# in different orders in different platforms and since NASA uses Linux to serve, we decide
# to ignore the tests on Mac OS to avoid the false failures since the attributes are retrieved
# correctly. see HYRAX-595.
AT_BESCMD_RESPONSE_TEST_OS([vfd_swmr_group_attrs.h5.dmr.bescmd])



# Test default cases.
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_compound.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT([d_compound.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_compound.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_compound.h5.ddx.bescmd])

# Compound scalar (both dap2 and dap4)
AT_BESCMD_RESPONSE_TEST_DEFAULT([comp_scalar.h5.dds.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT([comp_scalar.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([comp_scalar.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([comp_scalar.h5.dap.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([compound_simple_scalar.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([compound_simple_scalar.h5.dap.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([compound_simple_scalar_fix_str.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([compound_simple_scalar_fix_str.h5.dap.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([compound_simple_scalar_vlen_str.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([compound_simple_scalar_vlen_str.h5.dap.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([compound_simple_scalar_memb_array.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([compound_simple_scalar_memb_array.h5.dap.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([compound_simple_scalar_memb_str_array.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([compound_simple_scalar_memb_str_array.h5.dap.bescmd])

# Compound Array (both dap2 and dap4)
AT_BESCMD_RESPONSE_TEST_DEFAULT([compound_more_types.h5.dds.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT([compound_more_types.h5.data.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT([compound_more_types.h5.data.subset.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([compound_more_types.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([compound_more_types.h5.dap.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([compound_simple_array_fix_str.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([compound_simple_array_fix_str.h5.dap.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([compound_array_fix_str.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([compound_array_fix_str.h5.dap.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([compound_array_vlen_str.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([compound_array_vlen_str.h5.dap.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([compound_array_fix_vlen_str.h5.dap.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([compound_simple.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([compound_simple.h5.dap.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([compound_simple_array.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([compound_simple_array.h5.dap.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_group.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT([d_group.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_group.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_group.h5.ddx.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_objref.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT([d_objref.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_objref.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_objref.h5.ddx.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_regref.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT([d_regref.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_regref.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_regref.h5.ddx.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_link_soft.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT([d_link_soft.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_link_soft.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_link_soft.h5.ddx.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_link_hard.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT([d_link_hard.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_link_hard.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_link_hard.h5.ddx.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_int.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT([d_int.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_int.h5.dds.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_int.h5.ddx.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_int8.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT([d_int8.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_int8.h5.dds.bescmd])

# The scalar support.
AT_BESCMD_RESPONSE_TEST_DEFAULT([t_scalar_dset.h5.das.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT([t_scalar_dset.h5.data.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([t_scalar_dset.h5.dds.bescmd])



#Default DAP4 test
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_compound.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([d_compound.h5.dap.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_group.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([d_group.h5.dap.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_int.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([d_int.h5.dap.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([d_int.h5.dap_ce.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_objref.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([d_objref.h5.dap.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_regref.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([d_regref.h5.dap.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_link_soft.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([d_link_soft.h5.dap.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_link_hard.h5.dmr.bescmd])

# https://opendap.atlassian.net/browse/HR-68 
# May update this later.
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([d_link_hard.h5.dap.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_int8.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([d_int8.h5.dap.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([d_int64.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([d_int64.h5.dap.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([t_scalar_dset.h5.dmr.bescmd])

#check int8-bit data
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([t_scalar_dset.h5.dap.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([t_string_cstr.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([t_string_cstr.h5.dap.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([t_vl_string_cstr.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([t_vl_string_cstr.h5.dap.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([comp_complex_more.h5.dmr.bescmd])

# Cannot generate correct DAP4 for the all data in the current DAP4 implementation. 
# https://opendap.atlassian.net/projects/LIBDAP/issues/LIBDAP-18
#AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([comp_complex_more.h5.dap.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([comp_complex_more.h5.dap_ce_simple.bescmd])

# Cannot generate the expression constraint for the data in the current DAP4 implementation. 
# https://opendap.atlassian.net/projects/LIBDAP/issues/LIBDAP-18
#AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([comp_complex_more.h5.dap_ce.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([nest_comp_scalar.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([nest_comp_scalar.h5.dap.bescmd])

#netcdf4 classic simple
#AT_BESCMD_RESPONSE_TEST_DEFAULT([t_2d_2dll.nc4.h5.dmr.bescmd])
#AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([t_2d_2dll.nc4.h5.dap.bescmd])

#HDF-EOS5 augmented
#AT_BESCMD_RESPONSE_TEST_DEFAULT([grid_1_3d_xyz_aug.h5.dmr.bescmd])


#netcdf4 enhanced simple
AT_BESCMD_RESPONSE_TEST_DEFAULT([nc4_group_atomic.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([nc4_group_atomic_puredim.h5.dmr.bescmd])

#netcdf4 enhanced compound
AT_BESCMD_RESPONSE_TEST_DEFAULT([nc4_group_comp.h5.dmr.bescmd])

#group attributes(including the root)
AT_BESCMD_RESPONSE_TEST_DEFAULT([t_group_scalar_attrs.h5.dmr.bescmd])

#netcdf4 var and dim share the same name
AT_BESCMD_RESPONSE_TEST_DEFAULT([nc4_group_var_dim_name_same.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([nc4_group_var_dim_name_same.h5.dap.bescmd])

#HYRAX-588, check the handling of hardlinks
AT_BESCMD_RESPONSE_TEST_DEFAULT([dim_link.h5.dmr.bescmd])
# The hardlinks that doesn't follow the netCDF-4 model fails.
# This test is commented out.
#AT_BESCMD_RESPONSE_TEST_DEFAULT([dim_link_no_nc4.h5.dmr.bescmd])



# These tests call a function 'test(<name>)' that does not actually use variables
# from the dataset named in the 'URL,' but does pull attributes from the dataset.
# This tests that the DDS used as an argument to a function does contain attributes.
# ky 11/1/19
AT_BESCMD_RESPONSE_TEST_DEFAULT([d_int8.h5.function.ddx.bescmd])
AT_BESCMD_BINARYDATA_RESPONSE_TEST_DEFAULT([d_int8.h5.function.dods.bescmd])

# The empty constraint that transfers the whole file. 
AT_BESCMD_BINARYDATA_RESPONSE_TEST([grid_1_2d.h5.ce_empty.data.bescmd])
#AT_BESCMD_DAP4DATA_RESPONSE_TEST([t_int64_dap4_ce_empty_cf.h5.dap.bescmd])
AT_BESCMD_CFDMR_DAP4DATA_RESPONSE_TEST([t_int64_dap4_ce_empty_cf.h5.dap.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([t_int64_dap4_ce_empty.h5.dap.bescmd])

# Test the case when a dimension has multiple hardlinks(HYRAX-588)
AT_BESCMD_RESPONSE_TEST_DEFAULT([dim_link.h5.dmr.bescmd])

# Test special character handling
AT_BESCMD_RESPONSE_TEST_DEFAULT([t_special_char_attr.h5.dmr.bescmd])

# default HDF-EOS5 DMR tests
AT_BESCMD_RESPONSE_TEST_DEFAULT([grid_1_3d_xyz_aug.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([za_1_3d_yztd_aug.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([swath_1_2d_xyz.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([grid_2_2d.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([grid_2_2d_ps.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([grid_2_2d_sin.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([grid_2_2d_size.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([swath_2_3d_2x2yz.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([za_1_3d_yztd.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([swath_1_2d_xyz_special_char.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([swath_1_2d_xyz_special_char_aug.h5.dmr.bescmd])


# These two tests check the dynamic configuration change.  The target files are identical
# and the default configuration contains a DynamicConfig that matches the second file
# and sets H5.EnableCF=true so that Groups are flattened.
#AT_BESCMD_RESPONSE_TEST_DEFAULT([dynaconf_default.dmr.bescmd])
#AT_BESCMD_RESPONSE_TEST_DEFAULT([dynaconf_dynamic.dmr.bescmd])

# CF DAP4 special tests
AT_BESCMD_CFDMR_RESPONSE_TEST([d_int8.h5.dmr.bescmd])                                                       
AT_BESCMD_CFDMR_DAP4DATA_RESPONSE_TEST([d_int8.h5.dap.bescmd])                                              
AT_BESCMD_CFDMR_RESPONSE_TEST([d_int64.h5.dmr.bescmd])                                                      
AT_BESCMD_CFDMR_DAP4DATA_RESPONSE_TEST([d_int64.h5.dap.bescmd])                                             
AT_BESCMD_CFDMR_RESPONSE_TEST([t_scalar_dset.h5.dmr.bescmd])                                                
AT_BESCMD_CFDMR_DAP4DATA_RESPONSE_TEST([t_scalar_dset.h5.dap.bescmd])  

# netCDF-4 pure unlimited dimension
AT_BESCMD_CFDMR_RESPONSE_TEST([nc4_group_atomic_puredim_unlimit.h5.dmr.bescmd])

# Test DAP4 coverage for the default option
AT_BESCMD_RESPONSE_TEST_DEFAULT([nc4_group_coord.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([nc4_group_coord2.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([nc4_coverage_special.h5.dmr.bescmd])

# The no-CF compliant coordinate attributes(no maps)
AT_BESCMD_RESPONSE_TEST_DEFAULT([nc4_group_coord4.h5.dmr.bescmd])

#Array DSG: has maps
AT_BESCMD_RESPONSE_TEST_DEFAULT([nc4_single_trajectory.h5.dmr.bescmd])

# The scalar DSG: no maps
AT_BESCMD_RESPONSE_TEST_DEFAULT([nc4_point_scalar.h5.dmr.bescmd])

# local constraint: the maps are removed.
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([nc4_group_coord2.h5.d4constraint.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([nc4_group_coord2.h5.d4constraint_dim.bescmd])
# comment out now. This can be tested after libdap correctly remove all the maps in local contraint
#AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([nc4_single_trajectory.h5.d4constraint.dap.bescmd])
# The constraint with DAP4 dimensions works
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([nc4_single_trajectory.h5.d4constraint_dim.dap.bescmd])

# map order tests(map variables should be in front of all the other variables)
AT_BESCMD_RESPONSE_TEST_DEFAULT([nc4_group_coord3.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([nc4_coord4.h5.dmr.bescmd])
AT_BESCMD_RESPONSE_TEST_DEFAULT([nc4_coord5.h5.dmr.bescmd])


AT_BESCMD_RESPONSE_TEST_DEFAULT([d_size64_be.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([d_size64_be.h5.dap.bescmd])

AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([SDS_fle_shuf_2def.h5.dap.bescmd])

AT_BESCMD_RESPONSE_TEST_DEFAULT([dim_scale_null_space.h5.dmr.bescmd])

# ENUM test
AT_BESCMD_RESPONSE_TEST_DEFAULT([t_enum_name_scalar.h5.dmr.bescmd])
AT_BESCMD_DAP4DATA_RESPONSE_TEST_DEFAULT([t_enum_name_scalar.h5.dap.bescmd])

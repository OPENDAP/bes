#-----------------------------------------------------------------------#
# OPeNDAP HDF5 Data Handler BES Module Configuration file               #
#-----------------------------------------------------------------------#

#-----------------------------------------------------------------------#
# Require dap configuration to be loaded first                          #
#-----------------------------------------------------------------------#
BES.Include=dap.conf

#-----------------------------------------------------------------------#
# modules to load, includes data modules and command modules            #
#-----------------------------------------------------------------------#

BES.modules+=h5
BES.module.h5=@bes_modules_dir@/libhdf5_module.so

#-----------------------------------------------------------------------#
# Setting the data information
#-----------------------------------------------------------------------#

# The TypeMatch parameter is a list of handler/module names and a regular
# expression separated by a colon. If the regular expression matches an item,
# then the BES uses the associated handler/module. Each <handler>:<regular
# expression> pair is followed by a semicolon. This is used when creating
# containers in the BES (the 'set container' command). The example regular
# expression says to use the 'h5' handler for any file with an extension of
# 'h5', 'he5','H5','HDF5' or 'eos' which may also end in '.gz' or '.bz2'. 
# In the latter case the file will be treated as a compressed file.

BES.Catalog.catalog.TypeMatch+=h5:.*\.(HDF5|h5|he5|H5)(\.bz2|\.gz|\.Z)?$;

#-----------------------------------------------------------------------#
# HDF5 handler specific BES keys 
#-----------------------------------------------------------------------#

# BES Key: H5.EnableCF 
# When this key is set to true or is not present,  
# the handler handle the HDF5 file by following the CF conventions.
# The handler is especially tuned to handle NASA HDF5/netCDF4/HDF-EOS5 data products. 
# The key benefit of this option is to allow OPeNDAP visualization clients to 
# display remote data seamlessly.
# Please visit http://hdfeos.org/software/hdf5_handler/doc/cf.php[here] for details.
  
# When this key is set to false, 
# the handler handle the HDF5 file by following generic mapping from HDF5 to DAP. 
# If the HDF5 file is a netCDF-4/HDF5 file or 
# follows the netCDF data model and the DAP4 DMR response is requested, 
# the handler can map the HDF5 to DAP4 by following the netCDF data model. 
  
H5.EnableCF=true
 
# BES Key: H5.MetaDataMemCacheEntries
# Setting the H5.MetaDataMemCacheEntries to a value greater than zero
# enables caching DDS,DAS and DMR responses in memory. Our performance study shows that, 
# by turning on this key, the DDS,DAS or DMR response time is much faster. 
# The cache uses an LRU policy for purging old entries. It starts purging its objects 
# after the number of entries exceeds the number defined by this key. 
# One can tune its behavior by changing this value and the H5.CachePurgeLevel value below. 
# Note that this feature is on by default. The default value is 1000.
# To turn off this feature, set the value to 0.

H5.MetaDataMemCacheEntries=1000
# H5.MetaDataMemCacheEntries=0

# BES Key: H5.cachepurgelevel
# This key determines how much of the in-memory cache is removed when it is purged. 
# The default value is 0.2. With the default value, 
# it configures the software to remove the oldest 20% of items from the cache.  
# H5.CachePurgeLevel = 0.2


# ############# BES Keys for the CF Option#########################
# The following keys only work when H5.EnableCF is set to true.
# Unless specifically mentioned, these keys apply to both DAP2 and DAP4.
# The BES keys for CF Option will be no-op when the default option(non-CF option) is turned on.
#

# BES Key: H5.EnableCFDMR
# When this key is set to true or not present, the DAP4 DMR is generated 
# directly rather than via DDS and DAS.
# With this feature on, the HDF5 signed 8-bit integer is mapped to DAP4 
# signed 8-bit integer and the HDF5 64-bit integer is mapped to the corresponding DAP4 integer.
# If this key is set to false, the DMR is generated by DDS and DAS 
# and it maps signed 8-bit integer to signed 16-bit integer.
# Note: Starting from 1.16.5, this key is set to true by default.

H5.EnableCFDMR=true

# BES Key: H5.EnableCoorattrAddPath
# When this key is set to true, the group path contained in the "coordinates" attribute value for some 
# general HDF5 products(ICESAT-2 ATL03 etc.) will be added and flattened. This is to make
# the coordinate variable names stored in the "coordinates" attribute consistent with 
# the flattened variables in the DAP output.
#
# The default value is set to true.

H5.EnableCoorattrAddPath=true

# BES Key: H5.ForceFlattenNDCoorAttr
# If this key is set to true, the handler will try to flatten the coordinate variable path 
# stored inside the "coordinates" attribute. 
# Currently, this key only takes effect for the HDF5 file that follows
# the netCDF-4 data model when the 2-D latitude/longitude fields present.
#
# The default value is set to true.

H5.ForceFlattenNDCoorAttr=true

# BES Key: H5.EnableDropLongString
# If this key is set to true, under the conditions described below, the long string variables or attributes will be elided. 
# We find netCDF java has a string size limit(currently 32767). If an HDF5 string dataset
# has an individual element of which the size is greater than this limit, 
# visualization tools(Panoply etc.) that depend on
# the netCDF Java may not open the HDF5 file. So this key is set to true to
# skip the HDF5 string of which size is greater than 32767. Users should set this
# key to false if that long string information is necessary or visualization clients
# are not used.

# NOTE: 
# For the following two cases, the long string won't be dropped since the latest
# netCDF Java works. 
# 1) The size of an HDF5 string attribute exceeds 32767.
# 2) Even if the total size of an HDF5 string dataset exceeds 32767, but the 
#    individual string element size does not exceed 32767.
#
# The default value is set to true.

H5.EnableDropLongString=true

# BES Key: H5.EnableAddPathAttrs
# When this key is set to true, the original path of the HDF5 group or variable is
# kept as an attribute. Users can set this key to false if users don't
# care about the absolute path of object names. 
#
# The default value is set to true.

H5.EnableAddPathAttrs=true

# BES Key: H5.EnableFillValueCheck
# When this key is set to true, the handler will check if the _FillValue attribute 
# holds the the correct datatype and the attribute value is inside the valid data range.
# We find that occasionally that the datatype of attribute _FillValue is different 
# than the datatype of the corresponding variable for some NASA HDF5 products. 
# This violates the CF conventions. So the handler corrects the FillValue datatype
# to make it the same as the corresponding variable datatype. However, the
# original value of the _fillvalue may also fall out of the range of the variable datatype. 
# This can be illustrated by the following example.
#   The variable and the _fillvalue are present as follows:
#   variable datatype: unsigned char  
#   _fillvalue attribute datatype: signed char
#   The value of the _fillvalue: -127
 
# NOTE: the value of the _filevalue(-127) is out of the data range of the unsigned char.  
# An unsigned char number can not be negative. 
# If such a case occurs, we believe this is a data producer's mistake 
# and the hyrax service should return an error. 
# The Hyrax data service center should report this issue back to the data producer. 
# However, this may only occur for one or two variables and the data center may not 
# want to stop the hyrax service. So we provide this BES key so that 
# the data center can have an option to continue the service and may use NcML to patch the 
# wrong _fillvalue until the data producer corrects the wrong _fillvalue in the new release.
# By default, this key is set to true. If the fillvalue is out of the range of the variable type, 
# Hyrax generates an error and the service stops. 
# To ignore the _fillvalue check, set this key to false. The service runs normally but
# the _Fillvalue of some variables may be wrong and it will cause issues on the client-side.
#
# The default value is set to true.

H5.EnableFillValueCheck=true

# BES Key: H5.EnableDAP4Coverage
# When this key is set to true, the handler adds the DAP4 coverage information to the DMR. 
# This won't affect the netcdf-like operations. If for some reasons, this is not desirable. 
# set this key to false.
# This key only takes effect for DAP4 responses.
# 
# The default value is set to true.

H5.EnableDAP4Coverage=true

# BES Key:  H5.EnableCheckNameClashing
# When this key is set to true, the handler will check if there exists name clashing 
# among variables and attributes. If name clashing occurs, the handler tries to 
# resolve the name clashing by generating unique names for the clashed ones.
# For NASA HDF5 and HDF-EOS5 products, we don't see any name clashings for variables and attributes. 
# In fact, unlike HDF4, it is very rare to have name clashing for HDF5. 
# So to reduce performance overhead, we set this key to false by default. 
# Users can set this key to true if it becomes necessary.
#
# The default value is set to false.

H5.EnableCheckNameClashing=false

# BES Key: H5.NoZeroSizeFullnameAttr
# When this key is set to true, the fullnamepath attribute will NOT be added 
# if the HDF5 variable data storage size is 0. This is necessary to generate correct HDF5 dmr++ files.
# 
# The default value is set to false.

H5.NoZeroSizeFullnameAttr=false

# BES Key: H5.EscapeUTF8Attr
# When this key is set to true, the attribute values that use UTF-8 character
# encoding are escaped in the same way as values that use the ASCII encoding. To
# enable UTF-8 in attribute values, set this key to false.

# The default value is set to true.

H5.EscapeUTF8Attr = true

# BES Key: H5.EnableDiskMetaDataCache
# If this key is set to true, the DAS will be cached into a file.
# The handler will read DAS from the cached file instead of using the HDF5 library 
# to build since the second time. Note this key only takes effect for DAP2 responses.
# Since Hyrax 1.15, MetaData Store(MDS) has the similar feature as this key can achieve. 
# By default, this key is set to false. Users are encouraged to check if turning this key on 
# can improve performance before setting this key to true.

# The default value is set to false.

H5.EnableDiskMetaDataCache=false

# BES Key: H5.EnableEOSGeoCacheFile
# When this key is set to true, HDF-EOS5 Geolocation data is cached to a file.
# The latitude and longitude of an HDF-EOS5 grid will be calculated
# on-the-fly according to projection parameters stored in the HDF-EOS5
# file. The same latitude and longitude are calculated each time when
# an HDF-EOS5 grid is fetched. When the H5.EnableEOSGeoCacheFile key
# is set to true, the calculated latitude and longitude are cached to
# two flat binary files so that the same latitude and longitude will
# be obtained from the cached files starting from the second fetch.
# So it can reduce the time to re-calculate the latitude and longtiude.
# NASA data center reports by using this feature the access time is 
# greatly reduced. The reported EOS5 grid file is using sinusoidal projection. 
# Several associated keys must be set correctly when this key is set
# to true. 
# The description of these associated keys are:

# H5.Cache.latlon.path -  This key should provide the full path of an existing directory 
#                         that grants the read and write permissions for the generated 
#                         latitude and longitude cached files.

# H5.Cache.latlon.prefix - This key provides a prefix for the cache file. This is required by BES.
# H5.Cache.latlon.size - This key provides the size of the cache in megabytes, the value must be greater than 0.

# The default value is set to false.

H5.EnableEOSGeoCacheFile=false

# May need to change the values of the following keys if H5.EnableEOSGeoCacheFile is set to true.
# If H5.EnableEOSGeoCacheFile is false, the following keys will not be used.

H5.Cache.latlon.path=/tmp/latlon 
H5.Cache.latlon.prefix=l
H5.Cache.latlon.size=20000

# BES Key: H5.EnableDiskDataCache 
# If this key is set to true, the variable data will write to a binary file in the
# server. Data will be read in from the cached file since the second fetch.
# Several associated keys must be set correctly when this key is set to true.

# The description of these associated keys are:

# H5.DiskCacheDataPath - This key should provide the full path of an existing directory 
#                        that grants the read and write permissions for the generated 
#                        variable cached files.

# H5.DiskCacheFilePrefix - This key provides a prefix for the cache file. This is required by BES.
# H5.DiskCacheSize - This key provides the size of the cache in megabytes, the value must be greater than 0.

# The default value is set to false.
#
H5.EnableDiskDataCache=false

# May need to change the values of the following keys if H5.EnableDiskDataCache is set to true.
# If H5.EnableDiskDataCache is false, the following keys will not be used.
H5.DiskCacheDataPath=/tmp
H5.DiskCacheFilePrefix=c
#Set the cache size to ~100GB
H5.DiskCacheSize=100000

# BES Key: H5.DiskCacheComp
# This key only takes effect when the H5.EnableDiskDataCache key is set to true.
# This key and its associated keys provide a way for users to fine tune the data to be cached in the disk.
# The motive for this key is that users may not want to cache all variables
# either because there is disk limitation or the performance gain is less optimal for some variables.
# This key and the following associated keys will help mitigate these issues.
# If this key is set to true, only compressed HDF5 variables are cached. If compressed variables
# are cached, there is no data decompression time when retrieving the data. Therefore, performance may get improved.
#
# The following keys are provided to further limit the compressed variables of which the data is cached to the disk 
# when the H5.DiskCacheComp is set to true.
# H5.DiskCacheFloatOnlyComp: If this key is set to true, only floating-point compressed variables are cached.
# H5.DiskCacheCompThreshold: To take advantage of this key its value must be a floating-point number that is greater than 1.
#                            The handler will compare the compression ratio of a variable with this number,
#                            only when the compression ratio is smaller than this number
#                            (that is: the variable is hard to compress), the variable is cached.
#                            In other words, hard compressed variable usually takes longer decompression time.
#                            So using disk cache may greatly reduce the processing time.
# H5.DiskCacheCompVarSize: The value of this key represents the variable size in kilobytes. 
#                          It must be a positive integer number.
#                          Only if the (uncompressed) variable size that is greater than this value, 
#                          that variable data is cached.
#                          For example, if this number is 100, only the size of variable that is >100K will be cached.

#
# The default value is set to false.
#
H5.DiskCacheComp=false

# May need to change the values of the following keys if H5.EnableDiskDataCache is set to true and H5.DiskCacheComp is also true.
H5.DiskCacheFloatOnlyComp=true
H5.DiskCacheCompThreshold=2.0
H5.DiskCacheCompVarSize=100

# BES Key: H5.RmConventionAttrPath
# When this key is set to true, the HDF-EOS5 prepended path of the CF global "Conventions" attribute is removed.
# The default value is set to true.

H5.RmConventionAttrPath=true

# BES Key: H5.KeepVarLeadingUnderscore
# When this key is set to true, the underscore(_) in the variable path is kept.
# HDF5 group or dataset(variable) path always start with a '/'. When the CF naming rule is applied,
# the first '/' is always changes to "_". This is not necessary and may potentially confuse with
# CF predefined attributes(_FillValue e.g.). 
# So by keeping the following key's value be 'false', the leading underscore of a variable name
# or a group path in DDS and DAS are removed. For example, a variable path /a/b will be changed 
# to a_b rather than _a_b.
# One can set this BES key be true to keep the leading underscore in the variable name.
# Note this key only applies to general HDF5 products. 
# The leading underscore in a variable name is always stripped off for some NASA HDF5 products 
# and netCDF-4-like HDF5 products.

# The default value is set to false.

H5.KeepVarLeadingUnderscore=false


# BES Key: H5.EnablePassFileID
# When this key is set to true, HDF5 file ID is passed from metadata to data
# services. This may improve performance. However, it may cause NcML module
# fail to access different granules. So set this key to false by default.

# The default value is set to false.

H5.EnablePassFileID=false

# BES Key: DisableStructMetaAttr
# Note this key only takes effect for the HDF-EOS5 files.
# When this key is set to true, the ECS struct metadata is NOT mapped to DAP.
# Since the handler already uses this attribute to make metadata follow CF,
# the ECS Struct metadata attribute is not necessary to map to DAP.

# The default value is set to true.

H5.DisableStructMetaAttr=true

# BES Key: DisableECSMetaAttr
# Note this key only takes effect for the HDF-EOS5 files.
# When this key is set to true, the ECS metadata such as coremetadata, archivemetadata
# is NOT mapped to DAP.
# Since the coremetadata and archivemetadata sometimes are large, it makes the DAS or DMR
# really large, so by setting this key to true, may reduce the metadata size.

# The default value is set to false.

H5.DisableECSMetaAttr=false


# BES Key: H5.CheckIgnoreObj

# This key is used for data distributors to check if any HDF5 object is not mapped to DAP2. 
# This key must be set to false for the real service. Set it to true 
# will generate a DAS output that lists the ignored HDF5 objects and attributes
# when mapping HDF5 to DAP2.
# Also this key should only be used when the H5.EnableCF key is set to true.

# The default value is set to false.

H5.CheckIgnoreObj=false


# BES Key: H5.EnableDMR64bitInt
# WARNING 
# Read the following description carefully if you care about generating DMR from DDS and DAS.
# However, we strongly recommend you to use the direct generation of DMR for the CF option with
# by setting H5.EnableCFDMR=true. See the description for the key H5.EnableCFDMR.
#
# DAP2 doesn't support 64-bit integer. 
# The key below is set to false to make the DMR consistent
# with the DDS and DAS. Setting the key to true will enable
# the 64-bit integer support in the DMR output.
# 
# The default value is set to false.
#
H5.EnableDMR64bitInt=false

# More CF option BES keys for Cache 
#
# The following BES keys are tuned to store variable data in the memory. 
# They are supposed to improve performance for some use cases. However, our testing of some use
# cases don't show performance gain. This may be due to the internal caching mechanism of the tomcat 
# server. Nevertheless, we still keep the information in this file.

# 1. Caching the data values of HDF5 coordinate variables or specific variables in memory.
#
# The HDF5 handler provides a way for the data service agents to 
# cache the data values of coordinate variables or specific variables.
#
# Note: 
# 1) Since this is an advanced feature, we turn off this feature by default.
# Advanced users should read the description and change the H5.LargeDataMemCacheEntries and
# H5.SmallDataMemCacheEntries to an integer value greater than 0. 
# A suggested number is provided at a comment line right after the line the BES key is set.
# It may not be an optimial number for an individual case. Users may change the number
# to acheieve the best performance.
#
# 2) This feature only takes effect when the EnableCF key is set to true.
# 3) These features are not tested frequently,so bugs may exist. We welcome users report
#    any issue for these features.
# End of Note.
# 
# 1.1 Caching the latitude/longitude coordinate variables and specific data variables
#
# BES Key: H5.LargeDataMemCacheEntries
# Compared with other coordinate variables, arrays to store latitude/longitude are usually large 
# and arrays to store data variables in the memory cache are also relatively large.
# So we choose the name of this BES key H5.LargeDataMemCacheEntries .
# change the following line to something like H5.LargeDataMemCacheEntries=40 if using this feature.
#
H5.LargeDataMemCacheEntries=0
#H5.LargeDataMemCacheEntries=40

# BES Keys: H5.LargeDataMemCacheConfig, H5.DatacachePath, H5.LargeDataMemCacheFileName 
# By turning on the H5.LargeDataMemCacheConfig key to be true, one can provide a configuration file 
# to tell the handler whether and how one wants to store the latitude/longitude and other variable values.
#
# BES key H5.LargeDataMemCacheConfig, H5.DatacachePath, H5.LargeDataMemCacheFileName should be used together
# to tune this feature. 
# Note: If the above keys are not set or the values are not provided properly, as long as 
# H5.LargeDataMemCacheEntries is not 0, the values of latitude and longitude coordinate variables are still 
# cached in the memory by per file base. If the users choose to do this way, we recommend that
# the users may choose a bigger value for H5.LargeDataMemCacheEntries to avoid constant purging and refilling.
# For example, H5.LargeDataMemCacheEntries=100 or higher.
# 
#
# H5.DataCachePath tells the handler where the configuration file is located. It should be a full path of
# a directory (such as /tmp) in a server where Hyrax is installed.
#
# H5.LargeDataMemCacheFileName provides the configuration file name that the handler can read and carry out 
# the corresponding actions.
# The configuration file is a pure text file. 
# Let's call the configuration file ldata.conf.
# The information in the file should be something like:
# 1 cache-ll cache-ll2
# 0 no-cache-ll no-cache-ll2
# 2 "/cache-ll/swath_1_3d_2x2yz.h5/HDFEOS/SWATHS/Swath/Data Fields/Temperature" "non-cache-ll/foo"
#
# The first character of every line should always be a number: one of {0,1,2}. The handler will ignore
# the whole line if the first character at each line is not a number among {0,1,2}. 
# These numbers serve as flags to tell the handler on how to handle the data variables.
# After the number, an empty space should be followed, after the empty space, a string list can be 
# provided with an empty space as a common separator. 
# 
# 2.1.1 Description of each case
# A) Case 1: Flag =1 
# Many NASA grid files of the same product share the same latitude and longitude. So we may only
# cache one latitude/longitude for all the files of the same product. To achieve this,  
# For the line starting with number 1, one can specify one directory name where the latitude/longitude are shared
# either under this directory or under sub-directories of this directory.
# In other words, Any served HDF5 file of which the full path of the file name contains that directory qualifies 
# for this case.
# For example, two grid files mygrid1.h5 and mygrid2.h5 share the same latitude and longitude.
# They are located under the /cache-ll/foo. The full pathes for these filenames are 
# /cache-ll/foo/mygrid1.h5 and /cache-ll/foo/mygrid2.h5.
# One can specify  "1 cache-ll" at a line in the ldata.conf.  
# The handler will just store one pair of latitude/longitude for all file paths that include cache-ll.
# One can provide more than one directory name. If another two grid files yourgrid1.h5 and yourgrid2.h5 also
# share the same latitude and longitude and if they are located under /cache-ll2/foo2, one can add cache-ll2 at the same line.
#
# 1 cache-ll cache-ll2
#
# In this way, only one set of latitude/longitude is stored in the memory cache for any HDF5 file of which the path 
# matches cache-ll2.
# 
# ** Currently only one directory name can be specified and no '/' is allowed. Something like 
#    /cache-ll/foo won't be picked up by the handler. The handler will not include this directory
#    in its list of directories that stores one pair of latitude/longitude for a whole directory.**
#
# B) Case 2: Flag = 0
# Some NASA swath files have 2-D latitude/longitude coordinate variables that are not appropriate to 
# store in the memory cache because potentially  hundreds or thousands of relatively large latitude/longitude
# arrays stored in the array may cause frequent purging/refilling in this memory cache. It may also
# use much resource. So with this 
# flag on, one can specify directory names. The handler will NOT cache any latitude/longitude values 
# for HDF5 files under these directories or their subdirectories. 
#
# C) Case 3: Flag = 2
# Sometimes a few data variables of a product are so frequently accessed and the system can afford 
# to store them in the memory.
# The handler also provides a way for a user to specify these variables and store them in the memory cache.
# Users need to provide the path to identify these variables. The handler will cache values of a variable
# to the memory if the variable path matches the path provided in this list.
# Although it is not required to specify the file path of the variable to be cached, users should be fully aware
# that the variables that share the same variable name for all files may be cached 
# if they are accessed. This may or may not be what users want. If users just want to cache a variable
# for a specific file or files under a specific directory, this can also be done with this flag.
#
# The full path of the original HDF5 variable should be specified like something /foo1/foo2 foo1 is the
# HDF5 group and foo2 is the HDF5 variable name.
#
# An example: 
# If a user wants to cache the variable /SH/temperature for all HDF5 files served by this Hyrax server,
# it can be done with the following in the configuration file:
# 2 /SH/temperature 
# When the variable /SH/temperature in an HDF5 file is fetched, values of this variable will be cached in the 
# memory. If the varabile /SH/temperature in another HDF5 file is fetched, values of this variable will be
# cached in the memory in a different slot because the file path of these two files are different.
#
# If a user just wants to cache a variable /NH/temperature in a special file called foo.h5 under /foo2,
# it can also be done by adding the file path /foo2/foo.h5 to the configuration file,
# 2 /SH/temperature /foo2/foo.h5/NH/temperature
#
# The handler will only cache the variable /NH/temperature if the file path containing this variable 
# includes /foo2/foo.h5.
# WARNINGS: 
# Since HDF5 allows an empty space ' ' to be inside a variable path, for instance,  the group name 
# "/Data Fields" is legal in the HDF5. For such a case, users must use either single quotes or double
# quotes to encapsulate the file+variable path. Furthermore, even if only one variable path contains the space,
# one must still encapsulate all the other file+variable path. 
# Not doing so may cause the handler not to cache the corresponding variables.
# A correct example:
# 2 "foo.h5/Data Fields/foo2" "foo1.h5/foo3" 
# A incorrect example:
# 2 "foo.h5/Data Fields/foo" foo1.h5/foo3
# With the incorrect example, the handler will ignore foo1.h5/foo3.
#
# 2.1.2 Where to find sample configuration files? 
# Sample configuration files can be found under 
# https://github.com/OPENDAP/bes/blob/master/modules/hdf5_handler/bes-testsuite/h5.mem/ldatamem.conf
# https://github.com/OPENDAP/bes/blob/master/modules/hdf5_handler/bes-testsuite/h5.nasa.mem/lnasadatamem.conf 

## Uncomment the lines and fill in the corresponding values in your system
H5.LargeDataMemCacheConfig=false
#H5.LargeDataMemCacheConfig=true

# The directory where the configuration file is located.
H5.DataCachePath=
#H5.DataCachePath=/opt/tmp

# The configuration file that stores the info. to cache variable values.
H5.LargeDataMemCacheFileName=
#H5.LargeDataMemCacheFileName=ldatamem.conf

# BES Key: H5.SmallDataMemCacheEntries
# 1.2 Caching the non-latitude/longitude coordinate variables 
# These coordinate variables include height or other non-lat/lon coordinate variables.
# Usually these coordinate variables are stored in 1-D array and the storage size is small.
# That implies that the number of cache entries can be bigger.
# Currently no configuration file is implemented for users to tune on how to store these
# coordinate variables in the memory cache. Every such coordinate variable for a file will be
# stored in the memory as a cache entry. One can provide an integer number to identify
# the number of memory cache entries.
H5.SmallDataMemCacheEntries=0
#H5.SmallDataMemCacheEntries=200

# Keys for future use
#  State Plane Projection east and north files: Must provide the absolute path
#H5.STPEastFileName=/usr/tmp/nad27sp_le
#H5.STPNorthFileName=/usr/tmp/nad83sp_le
#
############# End of BES Keys for the CF Option#########################

# BES Key: H5.DefaultHandleDimension 
# This key only takes effect for the default Option
# When this key is set to true, the handler follows the netCDF-4 data model 
# to handle the HDF5 dimensions if possible.
# Change the key value to false if the dimension cannot be handled.
#
# This key only takes effect for DAP4 responses.
#
# The default value is set to true.
#
H5.DefaultHandleDimension=true


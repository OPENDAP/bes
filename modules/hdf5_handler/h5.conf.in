#-----------------------------------------------------------------------#
# OPeNDAP HDF5 Data Handler BES Module Configuration file               #
#-----------------------------------------------------------------------#

#-----------------------------------------------------------------------#
# Require dap configuration to be loaded first                          #
#-----------------------------------------------------------------------#
BES.Include=dap.conf

#-----------------------------------------------------------------------#
# modules to load, includes data modules and command modules            #
#-----------------------------------------------------------------------#

BES.modules+=h5
BES.module.h5=@bes_modules_dir@/libhdf5_module.so

#-----------------------------------------------------------------------#
# Setting the data information
#-----------------------------------------------------------------------#

# The TypeMatch parameter is a list of handler/module names and a regular
# expression separated by a colon. If the regular expression matches an item,
# then the BES uses the associated handler/module. Each <handler>:<regular
# expression> pair is followed by a semicolon. This is used when creating
# containers in the BES (the 'set container' command). The example regular
# expression says to use the 'h4' handler for any file with an extension of
# 'hdf', 'HDF' or 'eos' which may also end in '.gz' or '.bz2'. In the latter
# case the file will be treated as a compressed file.

# BES.Catalog.catalog.TypeMatch=nc:.*\.(nc|NC)(\.gz|\.bz2|\.Z)?$;h4.*\.(hdf|HDF|eos)(\.gz|\.bz2|\.Z)?$;

# To test your TypeMatch regular expression you can use besregtest as
# follows:

# % besregtest type # "nc:.*\.nc$;nc:.*\.nc\.gz$;" fnoc1.nc
# expression ".*\.(nc|NC)(\.gz|\.bz2|\.Z)?$" matches exactly, type = nc

BES.Catalog.catalog.TypeMatch+=h5:.*\.(HDF5|h5|he5|H5)(\.bz2|\.gz|\.Z)?$;

#-----------------------------------------------------------------------#
# HDF5 handler specific parameters: 
#-----------------------------------------------------------------------#

#
# EnableCF: Handle HDF data to follow the CF conventions
#   (true,yes|false,no, defaults to false)
# Since most centers  would like to handle HDF5 data that follows CF now,
# I set the EnableCF to be true, KY 2011-8-4
#
H5.EnableCF=true

# The following keys only work when H5.EnableCF is set to true.
# ######################################
#
# EnablePassFileID
# When this key is set to true, HDF5 file ID is passed from metadata to data
# services. This may improve performance. However, it may cause NcML module
# fail to access different granules. So set this key to false by default.
H5.EnablePassFileID=false

# DisableStructMetaAttr: Turn off HDF-EOS5 struct metadata
# In general, ECS Struct metadata attribute is not necessary to map to DAP
# since the handler already uses this attribute to make metadata follow CF 
H5.DisableStructMetaAttr=true

# DisableECSMetaAttr: Turn off HDF-EOS5 metadata such as coremetadata, archivemetada.
H5.DisableECSMetaAttr=false

# EscapeUTF8Attr: When true (the default) attribute values that use UTF-8 character
# encoding are escaped in the same way as values that use the ASCII encoding. To
# enable UTF-8 in attribute values, set this to false.
H5.EscapeUTF8Attr = true

# KeepVarLeadingUnderscore: Keep the underscore(_) in the variable path.

# HDF5 group or dataset(variable) path always start with a '/'. When the CF naming rule is applied,
# the first '/' is always changes to "_". This is not necessary and may potentially confuse with
# CF predefined attributes(_FillValue e.g.). 
# So by keeping the following key's value be 'false', the leading underscore of a variable name
# or a group path in DDS and DAS are removed. For example, a variable path /a/b will be changed 
# to a_b rather than _a_b.
# One can set this BES key be true to keep the leading underscore in the variable name.
# Note this key only applies to general HDF5 products. 
# The leading underscore in a variable name is always stripped off for some NASA HDF5 products 
# and netCDF-4-like HDF5 products.

H5.KeepVarLeadingUnderscore=false

# EnableCheckNameClashing: Check if there are variable name clashing and resolve the clashed names.

# When this key is set to true, the handler will check if
# there are name clashings among variables and attributes. 
# If name clashing occurs, the handler tries to resolve the
# name clashing by generating unique names for the clashed ones.
# For NASA HDF5 and HDF-EOS5 products, we don't see any
# name clashings for variables and attributes. In fact,
# unlike HDF4, it is very rare to have name clashing for HDF5.
# So to reduce performance overhead, we set this key to false by default. 
# Users can set this key to true if it becomes necessary.

H5.EnableCheckNameClashing=false

# EnableAddPathAttrs: The original path of a variable is kept as an attribute.

# When this key is set to true, the original path of the HDF5 objects is
# kept as an attribute. Users can set this key to false if users don't
# care about the absolute path of object names. Performance may get improved.
H5.EnableAddPathAttrs=true


# EnableDropLongString: Drop long string variables or attributes. 

# We find netCDF java has a string size limit(currently 32767). If an HDF5 string dataset
# has an individual element of which the size is greater than this limit, 
# visualization tools(Panoply etc.) that depend on
# the netCDF Java may not open the HDF5 file. So this key is set to be true to
# skip the HDF5 string of which size is greater than 32767. Users should set this
# key to false if that long string information is necessary or visualization clients
# are not used.
# Note: For the following two cases,the long string won't be dropped since the latest
# netCDF Java works fine.
# 1) The size of an HDF5 string attribute exceeds 32767.
# 2) Even if the total size of an HDF5 string dataset exceeds 32767, but the 
#    individual string element size doesn't exceed 32767.

H5.EnableDropLongString=true

# EnableFillValueCheck: Check if the _FillValue is within the correct datatype and data range.

# We find that occasionally that the datatype of attribute _FillValue is different
# than the datatype of the corresponding variable for some NASA HDF5 products. 
# This violates the CF conventions. So the handler
# corrects the FillValue datatype to be the corresponding variable datatype. However, the
# original value of the fillvalue may fall out of the range of the variable datatype.
# An example, var dtype: 'unsigned char';  original fillvalue dtype: 'signed char';
# original fill value: -127 is out of the range of "unsigned char". 
# If such a case occurs, we believe this is a data producer's mistake and should fail the service
# and let the data center reports this issue back to the data producer. 
# However, this may only occur for one or two variables and the data center may not 
# want to stop the hyrax service of this product. So we provide the following BES key so that 
# the data center can have an option to continue the service and may use NcML to patch the 
# wrong fillvalue until the data producer corrects it in the new release.
# By default, this key is set to true. If the fillvalue is out of the range of the variable type, 
# DAP service stops. 
# **To ignore the fillvalue check**, set this key to false. The service runs normally but
# the _Fillvalue of some variables may be wrong. netCDF-Java clients may not access the data correctly.

H5.EnableFillValueCheck=true

# CheckIgnoreObj: Check and list the HDF5 objects that are not mapped to DAP2.

# This key is used for data distributors to check if any HDF5 object is not mapped to DAP2. 
# This key must be set to false for the real service. Set it to true 
# will generate a DAS output that lists the ignored HDF5 objects and attributes
# when mapping HDF5 to DAP2.
# Also this key should only be used when the H5.EnableCF key is set to true.

H5.CheckIgnoreObj=false

# ForceFlattenNDCoorAttr: Flatten the variable path stored in the "coordinates" attribute.

# If this key is turned to be true, the handler will try to flatten the
# the coordinate variable path stored inside the "coordinates" attribute.
# Currently this key only takes effect for the HDF5 file that follows
# the netCDF-4 data model when the 2-D latitude/longitude fields present.

H5.ForceFlattenNDCoorAttr=true

# Remove the HDF-EOS5 prepended path of CF global "Conventions" attributes 

H5.RmConventionAttrPath=true

# Warning 
# Read the following description carefully if you care about generating DMR from DDS and DAS.
# However, we recommend you to use the direct generation of DMR for the CF option with
# by setting H5.EnableCFDMR=true. See the description for the key H5.EnableCFDMR.
#
# Support 64-bit integer mapping in the DAP4 DMR that is mapped from DAP2 DDS and DAS.
# DAP2 doesn't support 64-bit integer. 
# The key below is set to false to make the DMR consistent
# with the DDS and DAS. Turning the key to true will enable
# the 64-bit integer support in the DMR output.
H5.EnableDMR64bitInt=false

# When this key is set to true, the DAP DMR is generated directly rather than via DDS and DAS.
# With this feature, the signed 8-bit integer and 64-bit integer mappings are kept. 
# The DMR generated by DDS and DAS will map signed 8-bit integer to signed 16-bit integer.
# Starting from 1.16.5, this key is set to true by default.
H5.EnableCFDMR=true

# The handler will add DAP4 coverage information to the DMR by default. It won't affect
# the netcdf-like operations. If for some reasons, this is not desirable. Uncomment the
# following line to turn off this feature.
#H5.EnableDAP4Coverage=false

# When this key is turned on, the fullnamepath attribute will
# NOT be added if the HDF5 data storage size is 0. This is
# necessary to generate correct HDF5 DMRRPP files.
H5.NoZeroSizeFullnameAttr=false

# When this key is turned on, the group path of the "coordinates" attribute values for some 
# general HDF5 products(ICESAT-2 ATL03 etc.) will be added and flattened. This is to make
# the coordinate variable names stored in the "coordinates" attribute consistent with 
# the flattened variables in the DAP output.
H5.EnableCoorattrAddPath=true


# CACHING 
# C1. Caching DAP metadata response in memory. 
#
# MetaDataMemCacheEntries: 
# Cache the DDS,DAS and DMR in the memory, the cache will start purging its objects
# only after the number of entries exceeds the number defined by this key.
#
# The HDF5 handler can cache (in memory)DDS,DAS and DMR 
# responses it builds. If the H5.MetaDataMemCacheEntries value is zero, the cache
# is turned off. Setting the H5.MetaDataMemCacheEntries to a value greater than
# zero enables caching DDS,DAS and DMR reponses in memory. The cache
# uses a LRU policy for purging old entries; tune its behavior by
# changing the value and the CachePurgeLevel value below. Note that
# this feature is on by default.

H5.MetaDataMemCacheEntries=1000
#H5.MetaDataMemCacheEntries=0

# CachePurgeLevel: how much of the in-memory cahce is removed when it is purged.
#
# The H5.CachePurgeLevel key determines how much of the in-memory cache is
# removed when it is purged. The value 0.2 (the default) configures the
# software to remove the oldest 20% of items from the cache. You do not
# need to edit this to use the cache since 0.2 is the default value.

# H5.CachePurgeLevel = 0.2

# C2. Caching DAP metadata response in the disk
#
# EnableDiskMetaDataCache: HDF5 DAS will be read from a cached file.
#
# If this key is set to true, the DAS will be cached into a file.
# The handler will read DAS from the cached file instead of using the HDF5 library to build since the second time.
# Since Hyrax 1.15, MetaData Store(MDS) has the similar feature as this key achieves. Users are
# encourged to check if turning this key on can improve performance before setting this key true.
#

H5.EnableDiskMetaDataCache=false

# C3. Caching DAP data response in the disk

# EnableDiskDataCache: the raw data is cached. 

# If this key is set to true, the variable data
# will write to a binary file in the
# server. Data will be read in from the cached file since the second
# fetch. Several associated keys must be set correctly when this key
# is set to true.
#
#
# # The description of these associated keys are:
# #
# # H5.DiskCacheDataPath - An existing directory with read and write
# # permissions for the BES process.
# #
# # H5.DiskCacheFilePrefix - The cache file prefix, it must be given
# # for the cache to work. This requirement comes from the hyrax BES.
#
# # H5.DiskCacheSize - The size of the cache in megabytes, the value
# # must must be > 0.
# #
# # Example:
# # H5.EnableDiskDataCache=true
# # H5.DiskCacheDataPath=/tmp
# # H5.DiskCacheSize=100000

H5.EnableDiskDataCache=false
H5.DiskCacheDataPath=/tmp
H5.DiskCacheFilePrefix=c
#Set to ~100GB.
H5.DiskCacheSize=100000

# # The following keys provide a way for users to fine tune the data to be cached in the disk.
# # The main concern here is that users may not want to cache all variables 
# # either because the disk limitations or the performance gain is less optimal for some variables.
# # These BES keys will help mitigate these issues. 
# # If H5.DiskCacheComp is true, only compressed HDF5 variables are cached. If compressed variables
# # are cached, there is no data decompression time. 
# # We further provide more BES keys for users to fine tune according to their specific patterns.
# 
# # If H5.DiskCacheFloatOnlyComp is set to be true, only floating-point variables are cached.
# # If H5.DiskCacheCompThreshold is set, it should be a floating-point number that is greater than 1. 
# # The handler will compare the compression ratio of a variable with this number, 
# # only when the compression ratio is smaller than this number, the variable is cached.
# # In other words, hard compressed variable usually takes longer decompression time.
# # So using disk cache may greatly reduce the processing time.

# # H5.DiskCacheCompVarSize must be a positive integer number. 
# # It represents the variable size in kilobytes. 
# # Only the (uncompressed) variable size that is greater than this VarSize, the variable will be cached.
# # For example, if this number is 100, only the size of variable that is >100K will be cached.

H5.DiskCacheComp=false
H5.DiskCacheFloatOnlyComp=true
H5.DiskCacheCompThreshold=2.0
H5.DiskCacheCompVarSize=100

#
# C4. Caching HDF-EOS5 geolocation data in the disk
#
# EnableEOSGeoCacheFile: HDF-EOS5 Geolocation data is cached to a file. 
#
# The latitude and longitude of an HDF-EOS5 grid will be calculated
# on-the-fly according to projection parameters stored in the HDF-EOS5
# file. The same latitude and longitude are calculated each time when
# an HDF-EOS5 grid is fetched. When the H5.EnableEOSGeoCacheFile key
# is set to true, the calculated latitude and longitude are cached to
# two flat binary files so that the same latitude and longitude will
# be obtained from the cached files starting from the second fetch.
# Several associated keys must be set correctly when this key is set
# to true.
#
# The description of these associated keys are:
#
# H5.Cache.latlon.path - An existing directory with read and write
# permissions of GeoCache files for the BES process.
#
# H5.Cache.latlon.prefix - The cache file prefix, it must be given
# for the cache to work.
#
# H5.Cache.latlon.size - The size of the cache in megabytes, the
# must must be > 0.
#
# Example:  
# # H5.EnableEOSGeoCacheFile=true
# # H5.Cache.latlon.path=/tmp/latlon
# # H5.Cache.latlon.prefix=l
# # H5.Cache.latlon.size=20000
#
H5.EnableEOSGeoCacheFile=false
H5.Cache.latlon.path=/tmp/latlon
H5.Cache.latlon.prefix=l
H5.Cache.latlon.size=20000

## End of general CF option BES keys

# Keys for the default Option
# For the default option, change the key value to false if the dimension cannot be handled.
H5.DefaultHandleDimension=true

# More CF option BES keys for Cache 
#
# The following BES keys are tuned to store variable data in the memory. 
# They are supposed to improve performance for some use cases. However, our testing of some use
# cases don't show performance gain. This may be due to the internal caching mechanism of the tomcat 
# server. Nevertheless, we still keep the information in this file.

# 1. Caching the data values of HDF5 coordinate variables or specific variables in memory.
#
# The HDF5 handler also provides a way for the data service agents to 
# cache the data values of coordinate variables or specific variables.
#
# Note: 
# 1) Since this is an advanced feature, we turn off this feature by default.
# Advanced users should read the description and change the H5.LargeDataMemCacheEntries and
# H5.SmallDataMemCacheEntries to an integer value greater than 0. 
# A suggested number is provided at a comment line right after the line the BES key is set.
# It may not be an optimial number for an individual case. Users may change the number
# to acheieve the best performance.
#
# 2) This feature only takes effect when the EnableCF key is set to true.
# End of Note.
# 
# 1.1 Caching the latitude/longitude coordinate variables and specific data variables
#
# Compared with other coordinate variables, arrays to store latitude/longitude are usually large 
# and arrays to store data variables in the memory cache are also relatively large.
# So we choose the name of this BES key H5.LargeDataMemCacheEntries .
# change the following line to something like H5.LargeDataMemCacheEntries=40 if using this feature.
#
H5.LargeDataMemCacheEntries=0
#H5.LargeDataMemCacheEntries=40

# 
# By turning on the H5.LargeDataMemCacheConfig key to be true, one can provide a configuration file 
# to tell the handler whether and how one wants to store the latitude/longitude and other variable values.
#
# BES key H5.LargeDataMemCacheConfig, H5.DatacachePath, H5.LargeDataMemCacheFileName should be used together
# to tune this feature. 
# Note: If the above keys are not set or the values are not provided properly, as long as 
# H5.LargeDataMemCacheEntries is not 0, the values of latitude and longitude coordinate variables are still 
# cached in the memory by per file base. If the users choose to do this way, we recommend that
# the users may choose a bigger value for  H5.LargeDataMemCacheEntries to avoid constant purging and refilling.
# For example, H5.LargeDataMemCacheEntries=100 or higher.
# 
#
# H5.DataCachePath tells the handler where the configuration file is located. It should be a full path of
# a directory (such as /tmp) in a server where Hyrax is installed.
#
# H5.LargeDataMemCacheFileName provides the configuration file name that the handler can read and carry out 
# the corresponding actions.
# The configuration file is a pure text file. 
# Let's call the configuration file ldata.conf.
# The information in the file should be something like:
# 1 cache-ll cache-ll2
# 0 no-cache-ll no-cache-ll2
# 2 "/cache-ll/swath_1_3d_2x2yz.h5/HDFEOS/SWATHS/Swath/Data Fields/Temperature" "non-cache-ll/foo"
#
# The first character of every line should always be a number: one of {0,1,2}. The handler will ignore
# the whole line if the first character at each line is not a number among {0,1,2}. 
# These numbers serve as flags to tell the handler on how to handle the data variables.
# After the number, an empty space should be followed, after the empty space, a string list can be 
# provided with an empty space as a common separator. 
# 
# 2.1.1 Description of each case
# A) Case 1: Flag =1 
# Many NASA grid files of the same product share the same latitude and longitude. So we may only
# cache one latitude/longitude for all the files of the same product. To achieve this,  
# For the line starting with number 1, one can specify one directory name where the latitude/longitude are shared
# either under this directory or under sub-directories of this directory.
# In other words, Any served HDF5 file of which the full path of the file name contains that directory qualifies 
# for this case.
# For example, two grid files mygrid1.h5 and mygrid2.h5 share the same latitude and longitude.
# They are located under the /cache-ll/foo. The full pathes for these filenames are 
# /cache-ll/foo/mygrid1.h5 and /cache-ll/foo/mygrid2.h5.
# One can specify  "1 cache-ll" at a line in the ldata.conf.  
# The handler will just store one pair of latitude/longitude for all file paths that include cache-ll.
# One can provide more than one directory name. If another two grid files yourgrid1.h5 and yourgrid2.h5 also
# share the same latitude and longitude and if they are located under /cache-ll2/foo2, one can add cach-ll2 at the same line.
#
# 1 cache-ll cache-ll2
#
# In this way, only one set of latitude/longitude is stored in the memory cache for any HDF5 file of which the path 
# matches cache-ll2.
# 
# ** Currently only one directory name can be specified and no '/' is allowed. Something like 
#    /cache-ll/foo won't be picked up by the handler. The handler will not include this directory
#    in its list of directories that stores one pair of latitude/longitude for a whole directory.**
#
# B) Case 2: Flag = 0
# Some NASA swath files have 2-D latitude/longitude coordinate variables that are not appropriate to 
# store in the memory cache because potentially  hundreds or thousands of relatively large latitude/longitude
# arrays stored in the array may cause frequent purging/refilling in this memory cache. It may also
# use much resource. So with this 
# flag on, one can specify directory names. The handler will NOT cache any latitude/longitude values 
# for HDF5 files under these directories or their subdirectories. 
#
# C) Case 3: Flag = 2
# Sometimes a few data variables of a product are so frequently accessed and the system can afford 
# to store them in the memory.
# The handler also provides a way for a user to specify these variables and store them in the memory cache.
# Users need to provide the path to identify these variables. The handler will cache values of a variable
# to the memory if the variable path matches the path provided in this list.
# Although it is not required to specify the file path of the variable to be cached, users should be fully aware
# that the variables that share the same variable name for all files may be cached 
# if they are accessed. This may or may not be what users want. If users just want to cache a variable
# for a specific file or files under a specific directory, this can also be done with this flag.
#
# The full path of the original HDF5 variable should be specified like something /foo1/foo2 foo1 is the
# HDF5 group and foo2 is the HDF5 variable name.
#
# An example: 
# If a user wants to cache the variable /SH/temperature for all HDF5 files served by this Hyrax server,
# it can be done with the following in the configuration file:
# 2 /SH/temperature 
# When the variable /SH/temperature in an HDF5 file is fetched, values of this variable will be cached in the 
# memory. If the varabile /SH/temperature in another HDF5 file is fetched, values of this variable will be
# cached in the memory in a different slot because the file path of these two files are different.
#
# If a user just wants to cache a variable /NH/temperature in a special file called foo.h5 under /foo2,
# it can also be done by adding the file path /foo2/foo.h5 to the configuration file,
# 2 /SH/temperature /foo2/foo.h5/NH/temperature
#
# The handler will only cache the variable /NH/temperature if the file path containing this variable 
# includes /foo2/foo.h5.
# WARNINGS: 
# Since HDF5 allows an empty space ' ' to be inside a variable path, for instance,  the group name 
# "/Data Fields" is legal in the HDF5. For such a case, users must use either single quotes or double
# quotes to encapsulate the file+variable path. Furthermore, even if only one variable path contains the space,
# one must still encapsulate all the other file+variable path. 
# Not doing so may cause the handler not to cache the corresponding variables.
# A correct example:
# 2 "foo.h5/Data Fields/foo2" "foo1.h5/foo3" 
# A incorrect example:
# 2 "foo.h5/Data Fields/foo" foo1.h5/foo3
# With the incorrect example, the handler will ignore foo1.h5/foo3.
#
# 2.1.2 Where to find sample configuration files? 
# Sample configuration files can be found under 
# https://github.com/OPENDAP/hdf5_handler/blob/master/bes-testsuite/h5.mem/ldatamem.conf
# https://github.com/OPENDAP/hdf5_handler/blob/master/bes-testsuite/h5.nasa.mem/lnasadatamem.conf
# 

## Uncomment the lines and fill in the corresponding values in your system
H5.LargeDataMemCacheConfig=false
#H5.LargeDataMemCacheConfig=true

# The directory where the configuration file is located.
H5.DataCachePath=
#H5.DataCachePath=/opt/tmp

# The configuration file that stores the info. to cache variable values.
H5.LargeDataMemCacheFileName=
#H5.LargeDataMemCacheFileName=ldatamem.conf


# 1.2 Caching the non-latitude/longitude coordinate variables 
# These coordinate variables include height or other non-lat/lon coordinate variables.
# Usually these coordinate variables are stored in 1-D array and the storage size is small.
# That implies that the number of cache entries can be bigger.
# Currently no configuration file is implemented for users to tune on how to store these
# coordinate variables in the memory cache. Every such coordinate variable for a file will be
# stored in the memory as a cache entry. One can provide an integer number to identify
# the number of memory cache entries.
H5.SmallDataMemCacheEntries=0
#H5.SmallDataMemCacheEntries=200

# Keys for future use
#  State Plane Projection east and north files: Must provide the absolute path
#H5.STPEastFileName=/usr/tmp/nad27sp_le
#H5.STPNorthFileName=/usr/tmp/nad83sp_le
#

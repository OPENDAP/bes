#!/bin/sh

prefix=@prefix@
if [ "$prefix" == "NONE" ]
then
    prefix=/usr/local
fi

exec_prefix=@exec_prefix@
localstatedir=@localstatedir@
bindir=@bindir@

if [ ! -f ${bindir}/besdaemon ]
then
    echo "BES does not appear to be installed in ${prefix}"
    exit 1
fi
echo "BES install directory: ${prefix}"

###########################################################################
#
# Attempts to start the BES
#
#..........................................................................
startBES()
{
    echo "Starting the BES"

    findRunningBES
    if [ $BES_RUNNING  ] 
    then
        echo "The BES is already running."
    else
	canWritePid
	if [ $WRITE_PID ]
	then
	    "${bindir}"/besdaemon $otherArgs
	    sleep 5
	    findRunningBES
	    if [ $BES_RUNNING ]
	    then
		echo "OK: Successfully started the BES"
		cat "${localstatedir}"/run/bes.pid
	    else
		echo "FAILED: The BES daemon did not appear to start"
	    fi
	fi
    fi
}

###########################################################################
#
# Attempts to stop the BES
#
#..........................................................................
stopBES()
{
    echo "Shutting down the BES daemon"
    findRunningBES
    if [ $BES_RUNNING ]
    then
	if [ $BES_PID ]
	then
	    kill -INT $BES_PID
	    sleep 5
	    findRunningBES
	    if [ $BES_RUNNING ]
	    then
		echo "Unable to stop the BES, PID: $BES_PID"
	    else
		echo "Successfully shut down the BES"
	    fi
	else
	    echo "Not running, but pid = $BES_PID"
	fi
    else
	echo "The BES daemon is not currently running"
    fi
}

###########################################################################
#
# Attempt to restart the BES
#
#..........................................................................
restartBES()
{
    stopBES
    if [ !$BES_RUNNING ]
    then
	startBES
    fi
}

###########################################################################
#
# Attempts to locate a running BES by using the ps command to search the 
# process stack for running instances of the besdaemon and beslistner 
# programs. All of the PID are collected and cached in the environment
# vairable "BES_PID"
#
#..........................................................................
findRunningBES()
{
    unset BES_RUNNING
    
    if [ -f "$localstatedir"/run/bes.pid ]
    then
	BES_PID=`cat "$localstatedir"/run/bes.pid | cut -d' ' -f2`
	BESLISTENER_PID=`$PS | grep -v grep | grep $BES_PID | grep beslistener | awk '{print $2}'`
	if [ $BESLISTENER_PID ]
	then
	    BES_RUNNING=1
	else
	    echo "BES PID file exists but process not running, cleaning up"
	    /bin/rm -f  "$localstatedir"/run/bes.pid

	    BESLISTENER_PID=`$PS | grep -v grep | grep beslistener | awk '{print $2}'`
	    if [ $BESLISTENER_PID ]
	    then
		echo "BES seems to be running from a different location: $BESLISTENER_PID"
	    fi
	fi
    else
	BESLISTENER_PID=`$PS | grep -v grep | grep beslistener | awk '{print $2}'`
	if [ $BESLISTENER_PID ]
	then
	    echo "BES seems to be running from a different location: $BESLISTENER_PID"
	fi
    fi
}

###########################################################################
#
# Attempts to determine if the system is using the UCB or System V version 
# of the ps command.
#
#..........................................................................
checkPS()
{

# According to the OS/X man page, the UCB version of ps should not use the 
# dash in front of its options. On OS/X this prints a warning. jimg 10/29/07
UCB_PS="ps axww -o user,pid,command"
SYSTEM_V_PS="ps -ef -o user,pid,comm"


#echo "Checking ps syntax"

# I switched so that System V is tested first. This is because OS/X supports
# both syntaxes in a somewhat odd way and mentions that support for UCB might
# be removed in the future. jimg 10/29/07
$SYSTEM_V_PS > /dev/null
if  [ $? == 0 ]
then 
    PS=$SYSTEM_V_PS
    #echo "Using System V ps syntax"
else
    $UCB_PS > /dev/null     
    if  [ $? == 0 ]
    then 
        PS=$UCB_PS
        #echo "Using UCB ps syntax"
    else
        echo "Cannot determine a functional version of \"ps\" command. Exiting."
        exit 1
    fi
fi
}

###########################################################################
#
# Check to see if user can write the pid file
#
#..........................................................................
canWritePid()
{
    unset WRITE_PID

    # Make sure we can write the pid file! jhrg 3/31/2007
    if [ ! -x ${localstatedir}/run ] || [ ! -w ${localstatedir}/run ]
    then
	echo "The besctl command cannot write to ${localstatedir}/run."
	echo "Check that the directory exists and that the user running"
	echo "besctl has write permissions for it."
    else
	WRITE_PID=1
    fi
}

checkPS

what=$1
shift
otherArgs=$*

case $what in
stop)
    stopBES
    ;;
start)
    startBES
    ;;
restart)
    restartBES
    ;;
status)
    if [ ! -f "${localstatedir}"/run/bes.pid ]
    then
	echo "The BES daemon is not currently running"
	exit 1
    fi
    echo "The BES daemon is currently running"
    cat "${localstatedir}"/run/bes.pid
    ;;
*)
    echo "USAGE: besctl (start|stop|restart|status)"
    exit 1
    ;;
esac


#!@PERL@ -T

# Manage the cache directory. Given the pathname to the cache directory and
# the max size (in GB) of the cache, purge files until the size of cached
# files falls below the max size. Use an `oldest first' purge strategy. The
# cache directory can be used by other programs; this routine removes only
# files added by the routine decompress_and_cache(). It does this by
# selecting files which contains he regex `bes_cache#'.
#
# The arguments to this subroutine are:
# CACHE: the directory that holds the cached files
# CACHE_MAX_SIZE: prune files from the cache until the size (in megabytes) of
# the cache is less than this value.

sub purge_cache {
    my ( $cache, $cache_max_size ) = @_;

    $cache_max_size *= 1048576;    # Bytes/Meg
    my $cached_names_regex = ".*bes_cache#.*";
    my $cache_size         = 0;

    # Read the cache directory contents.
    opendir CACHE, $cache or die "Could not open the cache directory!\n";
    my (@files) = grep( /$cached_names_regex/, readdir(CACHE) );
    closedir CACHE;

    my ( %links, %sizes, %times, $nlink, $size, $atime, $file, $d );
    foreach $file (@files) {
        $file = "$cache\/$file";

        ( $d, $d, $d, $nlink, $d, $d, $d, $size, $atime ) = stat($file);
        $links{$file} = $nlink;
        $sizes{$file} = $size;
        $times{$file} = $atime;
        $cache_size += $size;
    }

    print STDERR "Spool size: $cache_size\n"         if $debug;
    print STDERR "Spool max size: $cache_max_size\n" if $debug;

    # Remove oldest files first. Continue removing files until cache size
    # falls below max size. Note that for sort ``... the normal calling code
    # for subroutines is bypassed... .'' Look in Wall's ``Programming PERL'',
    # p.218. 7/10/2001 jhrg
    my (@files_sorted_by_times) =
      sort( { $times{$a} <=> $times{$b} } keys(%times) );

    print STDERR "files sorted by times: @files_sorted_by_times\n" if $debug;

    my $sorted_file;
    foreach $sorted_file (@files_sorted_by_times) {

        # If enough files have been removed, stop flushing the cache.
        if ( $cache_size < $cache_max_size ) {
            return $cache_size;
        }

        # Remove the file if only one link to it exists (i.e., not in use).
        # Then update cache_size.
        if ( $links{$sorted_file} == 1 ) {
            unlink $sorted_file;

            # print STDERR "Removing $sorted_file\n";
            $cache_size -= $sizes{$sorted_file};
        }
    }
}

purge_cache( $ARGV[0], $ARGV[1] ) ;


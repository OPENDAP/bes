
# -*- tcl -*-

# This file is part of libdap, A C++ implmentation of the OPeNDAP Data
# Access Protocol.

# Copyright (c) 2002,2003 OPeNDAP, Inc.
# Author: James Gallagher <jgallagher@opendap.org>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# You can contact OPeNDAP, Inc. at PO Box 112, Saunderstown, RI. 02874-0112.

# Common code for dejaGNU-based automated tests.

# $Id: common_tests.exp 11906 2005-08-08 19:51:43Z root $

# Compare $expected to the global $comp_output. Run `pass' if they match,
# `fail' otherwise unless `xfailp' is true in which case run `xfail' if they
# do not match. $msg is the name of the test to print when calling pass, fail
# or xfail.
# 
# NB: $expected may be either a string or a file name. If it is the latter,
# read the file and compare its contents to $comp_output.

proc compare_stdout {expected msg {xfailp 0} {str_test compare}} {
    global comp_output
    global verbose


    # Make sure that the string test method passed in through $str_test is
    # either "compare" or "match" (The Tcl built in string function supports
    # several other methods, but this code DOES NOT!)
    # 5/26/99 ndp
    # If the equal test is the default we don't need the confusing logic
    # about $result == 0 --> $result == 1 and vice versa. I'll leave the
    # compare stuff in here for a while, then let's remove it (here and below).
    # 4/19/2002 jhrg 
    if {$str_test != "compare"  &&  $str_test != "match" && $str_test != "equal"} {
	send_user "BAD TEST METHOD: \"$str_test\". You MUST use \"compare\" or \"match\".\n"
	fail "Improper use of compare_stdout. \"$str_test\" is an unsupported method. Use \"compare\" or \"match\"."
    }

    # If $expected is the name of a file, read that file's contents and store
    # in $expected, then procede to compare $expected to $comp_output.

    if {[file exists $expected] && [file isfile $expected]} {
	if {$verbose >= 2} {
	    send_user "PWD: [pwd]\n"
	    send_user "Reading file: $expected\n"
	}
	set fd [open $expected r]
	set expected [read $fd]
	close $fd
    }

    # Trim is used here to remove trailing `\n's from files and data.
    set expected [string trim $expected]
    set comp_output [string trim $comp_output]

    set result [string $str_test $expected $comp_output]

    if {$verbose >= 2} {
	send_user "Result of $str_test: $result\n"
    }

    # Munge value returned when a test passes; compare returns 0 when two
    # strings are equal (i.e., test passed) and match returns 1 when the
    # pattern matches (i.e., test passed). Arrgh!!! This is Nathan's patch.
    # 5/25/99 jhrg
    if {$str_test == "compare"} {
	if {$result == 1} {
	    set result 0
	} elseif {$result == 0} {
	    set result 1
	}
    }

    if {$result == 1} {
	pass "$msg"
	send_user "PASS: $msg\n"
    } elseif {$xfailp == 1} {
	xfail "$msg"
	send_user "XFAIL: $msg\n"
    } else {
	fail "$msg"
    }

    # Added test for xfailp so that verobse == 1 will show only tests that
    # are not expected to fail. 5/18/2001 jhrg
    if {$verbose >= 2} {
	send_user "Comp output:$comp_output\n"
	send_user "Expected output:$expected\n"
    }

    if {$result != 1 && ($verbose >= 2 || ($verbose == 1 && $xfailp != 1))} {
	set tlen [string length $expected]
	set clen [string length $comp_output]

	set len $tlen;			# used by for loop below

	if {$clen < $tlen} {
	    set len $clen;			# set if needed

	    set size [expr $tlen - $clen]
	    send_user "comp_output is smaller (by $size chars) than expected!\n"
	    send_user "Here's the excess: '"
	    send_user [string range $expected [expr $clen -1] end]
	    send_user "'\n"
	} elseif {$tlen < $clen} {
	    set size [expr $clen - $tlen]
	    send_user "comp_output is larger (by $size chars) than expected!\n"
	    send_user "Here's the excess: '"
	    send_user [string range $comp_output [expr $tlen -1] end]
	    send_user "'\n"
	}

	# $len is set to the smallest of $tlen or $clen to avoid running off
	# the end either of the strings. Only send this info with $verbose is
	# at least 3. This is producing too much output in most cases!
	# 06/28/04 jhrg
	if {$verbose >= 3} {
	    for {set i 0} {$i < $len} {incr i} {
		set c [string index $comp_output $i]
		set t [string index $expected $i]
		if {$t != $c} {
		    send_user "comp_output ($c) and expected ($t) differ at $i.\n"
		}
	    }
	}

	# fail "$msg"
    }
}


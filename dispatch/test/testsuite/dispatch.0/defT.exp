# expect/tcl code to test defT
# pcw
#

global comp_output		# contains output from das-test_start
global verbose			# this and srcdir are set by runtest.exp
global srcdir
global dispatchTEST

# The variable `test_out' is a string that contains the text that should be
# stored in comp_output by das-test_start. The two strings should match
# exactly.

set test_out "
*****************************************
Entered defT::run

*****************************************
add d1, d2, d3, d4, d5
successfully added d1
successfully added d2
successfully added d3
successfully added d4
successfully added d5

*****************************************
find d1, d2, d3, d4, d5
found d1
    agg command correct
found d2
    agg command correct
found d3
    agg command correct
found d4
    agg command correct
found d5
    agg command correct

*****************************************
show definitions
Definition: d1
Containers:
Aggregation: d1agg

Definition: d2
Containers:
Aggregation: d2agg

Definition: d3
Containers:
Aggregation: d3agg

Definition: d4
Containers:
Aggregation: d4agg

Definition: d5
Containers:
Aggregation: d5agg

*****************************************
delete d3
successfully deleted d3
    did not find d3

*****************************************
delete d1
successfully deleted d1
    did not find d1

*****************************************
delete d5
successfully deleted d5
    did not find d5

*****************************************
find d2 and d4
found d2, good
found d4, good

*****************************************
delete all definitions

*****************************************
find definitions d1, d2, d3, d4, d5
didn't find d1, good
didn't find d2, good
didn't find d3, good
didn't find d4, good
didn't find d5, good

*****************************************
Returning from defT::run"

set dispatchTEST ./defT

dispatch_start

if ![string compare $test_out $comp_output] { # check comp_output
    pass "defT"
} else {
    fail "defT"
}


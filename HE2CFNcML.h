//////////////////////////////////////////////////////////////////////////////
// This file is part of the hdf4 data handler for the OPeNDAP data server.
// Copyright (c) 2010 The HDF Group
//
// Author: Hyo-Kyung Lee <hyoklee@hdfgroup.org>
//
// This is free software; you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2.1 of the License, or (at your
// option) any later version.
//
// This software is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
// License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this software; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
// You can contact OPeNDAP, Inc. at PO Box 112, Saunderstown, RI. 02874-0112.
//////////////////////////////////////////////////////////////////////////////
#ifndef _HE2CFNcML_H_
#define _HE2CFNcML_H_
#include <string>
#include <exception>
#include <iostream>
#include <libxml/parser.h>
#include <libxml/xmlstring.h>
#include <libxml/parserInternals.h>
#include <vector>
#include "debug.h"
#include "DAS.h"
#include "InternalErr.h"
using namespace std;
using namespace libdap;
/// A class for handling input XML file.
///
/// This class contains functions that parse the handler input file
/// and changes the behavior of handler specified in the input file.
///
/// Most functions are copied or adapted from OPeNDAP ncml_module.
/// Therefore, a full credit should go to Michael Johnson
/// <m.johnson@opendap.org>. 
///
/// @author Hyo-Kyung Lee <hyoklee@hdfgroup.org>
/// 
class HE2CFNcML
{
private:
    DAS* _das;
    AttrTable *at;    
    bool _check_name_clash;
    bool _check_multi_cvar;
    
    char _prefix;    
    char _valid_char;


    int _short_name_size;
    int _z_dim_size;

    string _attribute_name;
    string _attribute_type;
    string _convention;    
    string _filename;
    string _suffix;
    string _variable;
    string _z_dim_name;
    string _z_var_fname;
    string _z_var_gname;
    
    
    std::vector<int> _values;

    
    xmlSAXHandler _handler;
    xmlParserCtxtPtr _context;
    
    /// checks if the specified XML input filename exists
    /// to speed up handler.
    bool exists();
    bool process_attribute();
    bool process_attribute_attr(string name, string value);
    bool process_check_multi_cvar();
    bool process_check_name_clash();
    bool process_convention();        
    bool process_prefix();    
    bool process_shortname();
    bool process_suffix();
    bool process_validchar();
    bool process_values(string delim);
    bool process_variable();
    bool process_variable_attr(string name, string value);
    bool process_z_dim();    
    bool process_z_dim_attr(string name, string value);
    bool process_z_var();    
    bool process_z_var_attr(string name, string value);
    void set_callbacks(xmlSAXHandler& h);

    
public:
    /// A current content inside a tag element.
    string content;
    /// A current tag element being processed.
    string element;
    /// A previous tag element being processed.    
    string element_stack;
    string attr_name;
    string attr_value;


    std::vector<string> _variables;
    
    HE2CFNcML();
    virtual ~HE2CFNcML();

    /// gets the flag for multiple coordinate variables checking.
    bool get_check_multi_cvar();

    /// gets the flag for name clash checking.
    bool get_check_name_clash();

    /// gets the convention form the input file.
    ///
    /// By default, it returns "COARDS". If user specifies "CF-1.4"
    /// inside <convention> tag, it will return "CF-1.4".
    /// It rejects all other inputs.
    string get_convention();

    
    /// gets the current working directory of the handler.
    string get_current_working_directory(string hdf_file_name);

    
    /// gets the XML input filename.
    string get_filename();

    /// gets prefix string specified in the input file.
    ///
    /// User can specify some custom string if a variable
    /// starts with a number, which CF convention doesn't allow.
    char get_prefix();
    
    /// gets the size of short name if defined in the input file. 
    ///
    /// It returns -1 by default.
    int get_short_name_size();
    
    /// gets C++ string from xmlChar pointer.
    ///
    /// This is primarily for XML parser callback function,
    /// not for HDF4 handler use.
    string get_string_from_xmlchar(const xmlChar* theCharsOrNull);

    /// gets suffix string specified in the input file.
    ///
    /// User can specify some custom string in front of the unique number
    /// generated by HDF4 handler to handle name clashing.
    string get_suffix();
    

    /// gets the valid character to sanitize the HDF-EOS2 string.
    char get_valid_char();
    
    /// reads the XML file and parses it.
    bool read();

    /// reads the XML file and parses it.
    bool read(DAS& das);


    /// sets the internal variables depending on the input element attributes.
    ///
    ///  This is primarily for XML parser callback function,
    ///  not for HDF4 handler use.
    bool read_attribute(int nb_attributes, const xmlChar **attributes);
    
    /// sets the internal variables depending on the input element contents.
    ///
    ///  This is primarily for XML parser callback function,
    /// not for HDF4 handler use.
    bool read_content(string element);
    
    /// sets the XML input filename.
    void set_filename(string s);

    /// removes the variable from the _variables vector.
    bool  set_variable_clear(string s);

    /// throws an error if XML input file has a problem.
    void write_error(string error);    
};

#endif

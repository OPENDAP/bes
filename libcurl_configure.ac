dnl -*- automake -*-
dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.63)

dnl Update version here and below at LIB_CURRENT, ..., if needed.
AC_INIT(bes, 3.19.0, support@opendap.org)
AC_CONFIG_SRCDIR([libcurl_configure.ac])

AC_CONFIG_AUX_DIR([conf])
AC_CONFIG_MACRO_DIR([conf])

dnl flags for the compilers and linkers - set these before locating the
dnl actual tools since some of the AC_PROG macros set these 'flag variables'
dnl to default values otherwise.
AC_CANONICAL_HOST
AC_SUBST(host)

dnl support the --with-curl option for specifying a particular version of curl.

dnl I wrote these checks because we need the *-config scripts to build, so 
dnl the AC_CHECK_LIB macro is not needed.

AC_ARG_VAR(CURL_LIBS, [libcurl required libraries])
AC_ARG_VAR(CURL_CFLAGS, [libcurl required compiler flags])

curl_is_ok=no
curl_req_version=7.20.0

AC_ARG_WITH(curl,
    AS_HELP_STRING([--with-curl=prefix], [Prefix where curl/libcurl is installed; any version found is used.]),
    with_curl_prefix="$withval",
    with_curl_prefix="")

AS_IF([test -n "$with_curl_prefix" -a -x $with_curl_prefix/bin/curl-config],
    [AC_MSG_CHECKING([for libcurl])
     CURL_LIBS="`$with_curl_prefix/bin/curl-config --libs`"
     CURL_CFLAGS="`$with_curl_prefix/bin/curl-config --cflags`"
     AC_MSG_RESULT([yes; used $with_curl_prefix/bin/curl-config])
     curl_is_ok=yes],
    
    dnl FAIL if $with_curl_prefix is not zero but the script is not executable
    [test -n "$with_curl_prefix"],
    [AC_MSG_ERROR([curl-prefix set to $with_curl_prefix, but curl-config is not there.])])
    
AC_ARG_VAR(PKG_CONFIG, [path to pkg-config utility])
AC_PATH_TOOL(PKG_CONFIG, pkg-config)

AS_IF([test -n "$PKG_CONFIG"], 
    [AC_MSG_CHECKING([for libcurl using pkg-config])
     AS_IF([pkg-config --atleast-version=$curl_req_version curl],
        [CURL_CFLAGS=`pkg-config --cflags curl`
         CURL_LIBS=`pkg-config --libs curl`
         AC_MSG_RESULT([yes; found at least version $curl_req_version])
         curl_is_ok=yes],
        [AC_MSG_RESULT(no, needed $curl_req_version)])])
    
AC_ARG_VAR(CURL_CONFIG, [path to curl-config utility])
AC_PATH_TOOL(CURL_CONFIG, curl-config)

AS_IF([test -n "$CURL_CONFIG"], 
    [AC_MSG_CHECKING([for libcurl using curl-config])
     version_libcurl=`curl-config --version | sed 's@libcurl \(.*\)@\1@'`
     AS_VERSION_COMPARE([$version_libcurl], [$curl_req_version], [curl_is_ok=no], [curl_is_ok=yes], [curl_is_ok=yes])
     AS_IF([test $curl_is_ok = yes],
        [CURL_LIBS="`curl-config --libs`"
         CURL_CFLAGS="`curl-config --cflags`"
         AC_MSG_RESULT([yes; found version $version_libcurl])],
        [AC_MSG_RESULT([no, found version $version_libcurl but needed $curl_req_version])])])

AS_IF([test $curl_is_ok = no],       
    [AC_MSG_ERROR([libcurl: insufficient version or not found])])
    
dnl if gridfields-config --version > /dev/null 2>&1
dnl then
dnl     version_libgf=`gridfields-config --version | sed 's@gridfields \(.*\)@\1@'`
dnl     AS_VERSION_COMPARE($version_libgf, $libgf_needed, [libgf_ok=no], [libgf_ok=yes], [libgf_ok=yes])
dnl     if test x$libgf_ok = xno
dnl     then
dnl         AC_MSG_ERROR([FIXME must have libgf $libgf_needed or greater, found $version_libgf])
dnl     fi
dnl 
dnl     GF_LIBS="`gridfields-config --libs`"
dnl     GF_CFLAGS="`gridfields-config --cflags`"
dnl     GF_PATH="`gridfields-config --prefix`"
dnl 
dnl     AC_DEFINE([GRIDFIELDS],[1],[define if gridfields lib is present])
dnl     AC_MSG_RESULT([yes; used gridfields-config])
dnl lif test -f $ac_bes_dependencies_prefix/lib/libgridfields.a -a -d $ac_bes_dependencies_prefix/include/gridfields/
dnl then
dnl     libgf_ok="yes"
dnl     GF_LIBS="-L$ac_bes_dependencies_prefix/lib -lgridfields"
dnl     GF_CFLAGS="-I$ac_bes_dependencies_prefix/include"
dnl     GF_PATH=$ac_bes_dependencies_prefix
dnl     AC_DEFINE([GRIDFIELDS],[1],[define if gridfields lib is present])
dnl     AC_MSG_RESULT([yes; used --with-dependencies value ($ac_bes_dependencies_prefix)])
dnl else
dnl     AC_MSG_NOTICE([I could not find libgridfields])
dnl fi
    
********************

dnl ***********************************************************************
dnl DMR++ module support - only when BES_DEVELOPER is set do we need this.
dnl jhrg 11/28/17
dnl
dnl support the --with-curl option for specifying a particular version of curl.
dnl This will be used only when BES_DEVELOPER (aka --enable-developer) is set,
dnl since that's the only time the dmr++ module is build.

AC_ARG_VAR(CURL_LIBS, [libcurl required libraries])
AC_ARG_VAR(CURL_CFLAGS, [libcurl required compiler flags])

AM_COND_IF([BES_DEVELOPER], [

curl_is_ok=no
curl_req_version=7.20.0

AC_ARG_WITH([curl],
    AS_HELP_STRING([--with-curl], [Prefix where curl/libcurl is installed; any version found is used.]),
    with_curl_prefix="$withval",
    with_curl_prefix="")

AS_IF([test -n "$with_curl_prefix" -a -x $with_curl_prefix/bin/curl-config],
    [AC_MSG_CHECKING([for libcurl])
     CURL_LIBS="`$with_curl_prefix/bin/curl-config --libs`"
     CURL_CFLAGS="`$with_curl_prefix/bin/curl-config --cflags`"
     AC_MSG_RESULT([yes; used $with_curl_prefix/bin/curl-config])
     curl_is_ok=yes],
    
    dnl FAIL if $with_curl_prefix is not zero but the script is not executable
    [test -n "$with_curl_prefix"],
    [AC_MSG_ERROR([curl-prefix set to $with_curl_prefix, but curl-config is not there.])])
    
AC_ARG_VAR(PKG_CONFIG, [path to pkg-config utility])
AC_PATH_TOOL([PKG_CONFIG], [pkg-config])

AS_IF([test -n "$PKG_CONFIG"], 
    [AC_MSG_CHECKING([for libcurl using pkg-config])
     AS_IF([pkg-config --atleast-version=$curl_req_version curl],
        [CURL_CFLAGS=`pkg-config --cflags curl`
         CURL_LIBS=`pkg-config --libs curl`
         AC_MSG_RESULT([yes; found at least version $curl_req_version])
         curl_is_ok=yes],
        [AC_MSG_RESULT([no, needed $curl_req_version])])])
    
AC_ARG_VAR(CURL_CONFIG, [path to curl-config utility])
AC_PATH_TOOL([CURL_CONFIG], [curl-config])

AS_IF([test -n "$CURL_CONFIG"], 
    [AC_MSG_CHECKING([for libcurl using curl-config])
     version_libcurl=`curl-config --version | sed 's@libcurl \(.*\)@\1@'`
     AS_VERSION_COMPARE([$version_libcurl], [$curl_req_version], [curl_is_ok=no], [curl_is_ok=yes], [curl_is_ok=yes])
     AS_IF([test $curl_is_ok = yes],
        [CURL_LIBS="`curl-config --libs`"
         CURL_CFLAGS="`curl-config --cflags`"
         AC_MSG_RESULT([yes; found version $version_libcurl])],
        [AC_MSG_RESULT([no, found version $version_libcurl but needed $curl_req_version])])])

AS_IF([test $curl_is_ok = no],       
    [AC_MSG_ERROR([libcurl: insufficient version or not found])])
    
])  dnl End AM_COND_IF BES_DEVELOPER for DMR++/libcurl

*******************

dnl ##################################################################
 
if test "$libgf_ok" = "no" -a "$enable_gridfields" = "yes"
then

# save PATH     
gridfields_save_path=$PATH

# if --with-dependencies was used, look there too
AS_IF([test -n "$ac_bes_dependencies_prefix"],
    [PATH=$ac_bes_dependencies_prefix/bin:$PATH])

AC_MSG_CHECKING([for libgridfields $libgf_needed])

dnl Use AS_VERSION_COMPARE to test version numbers. jhrg 9/9/15

AS_IF([gridfields-config --version > /dev/null 2>&1],
    [version_libgf=`gridfields-config --version | sed 's@gridfields \(.*\)@\1@'`
    AS_VERSION_COMPARE($version_libgf, $libgf_needed, [libgf_ok=no], [libgf_ok=yes], [libgf_ok=yes])
    if test x$libgf_ok = xno
    then
        AC_MSG_ERROR([FIXME must have libgf $libgf_needed or greater, found $version_libgf])
    fi

    GF_LIBS="`gridfields-config --libs`"
    GF_CFLAGS="`gridfields-config --cflags`"
    GF_PATH="`gridfields-config --prefix`"

    AC_DEFINE([GRIDFIELDS],[1],[define if gridfields lib is present])
    AC_MSG_RESULT([yes; used gridfields-config])
    ],
    [test -f $ac_bes_dependencies_prefix/lib/libgridfields.a -a -d $ac_bes_dependencies_prefix/include/gridfields/],
    [libgf_ok="yes"
    GF_LIBS="-L$ac_bes_dependencies_prefix/lib -lgridfields"
    GF_CFLAGS="-I$ac_bes_dependencies_prefix/include"
    GF_PATH=$ac_bes_dependencies_prefix
    AC_DEFINE([GRIDFIELDS],[1],[define if gridfields lib is present])
    AC_MSG_RESULT([yes; used --with-dependencies value ($ac_bes_dependencies_prefix)])
    ],
    [AC_MSG_NOTICE([I could not find libgridfields]) ])
    
****************

AS_IF([test "$libgf_ok" = "no" -a "$enable_gridfields" = "yes"],
    [

# save PATH     
gridfields_save_path=$PATH

# if --with-dependencies was used, look there too
AS_IF([test -n "$ac_bes_dependencies_prefix"], [PATH=$ac_bes_dependencies_prefix/bin:$PATH])

AC_MSG_CHECKING([for libgridfields $libgf_needed])

dnl Use AS_VERSION_COMPARE to test version numbers. jhrg 9/9/15

AS_IF([gridfields-config --version > /dev/null 2>&1],
    [
    version_libgf=`gridfields-config --version | sed 's@gridfields \(.*\)@\1@'`
    AS_VERSION_COMPARE($version_libgf, $libgf_needed, [libgf_ok=no], [libgf_ok=yes], [libgf_ok=yes])
    AS_IF([test x$libgf_ok = xno],
        [
        AC_MSG_ERROR([FIXME must have libgf $libgf_needed or greater, found $version_libgf])
        ])

    GF_LIBS="`gridfields-config --libs`"
    GF_CFLAGS="`gridfields-config --cflags`"
    GF_PATH="`gridfields-config --prefix`"

    AC_DEFINE([GRIDFIELDS],[1],[define if gridfields lib is present])
    AC_MSG_RESULT([yes; used gridfields-config])
    ],
    [test -f $ac_bes_dependencies_prefix/lib/libgridfields.a -a -d $ac_bes_dependencies_prefix/include/gridfields/],
    [
    libgf_ok="yes"
    GF_LIBS="-L$ac_bes_dependencies_prefix/lib -lgridfields"
    GF_CFLAGS="-I$ac_bes_dependencies_prefix/include"
    GF_PATH=$ac_bes_dependencies_prefix
    AC_DEFINE([GRIDFIELDS],[1],[define if gridfields lib is present])
    AC_MSG_RESULT([yes; used --with-dependencies value ($ac_bes_dependencies_prefix)])
    ],
    [AC_MSG_NOTICE([I could not find libgridfields])]
)
    
# Restore saved value of PATH
export PATH=$gridfields_save_path
])

AC_SUBST([GF_LIBS])
AC_SUBST([GF_CFLAGS])
AC_SUBST([GF_PATH])

if test "$libgf_ok" = "yes"
then
    echo "Set gridfields CFLAGS to $GF_CFLAGS"
    echo "Set gridfields LIBS to $GF_LIBS"
    AM_CONDITIONAL([USING_GRIDFIELDS],[true])
else
    AM_CONDITIONAL([USING_GRIDFIELDS],[false])
fi

dnl End handler specific tests

],[ # else AM_COND_IF([DAP_BUILTIN_MODULES]


#-----------------------------------------------------------------------#
# OPeNDAP HDF4 Data Handler BES Module Configuration file               #
#-----------------------------------------------------------------------#

#-----------------------------------------------------------------------#
# Require dap configuration to be loaded first                          #
#-----------------------------------------------------------------------#
BES.Include=dap.conf

#-----------------------------------------------------------------------#
# modules to load, includes data modules and command modules            #
#-----------------------------------------------------------------------#

BES.modules+=h4
BES.module.h4=@bes_modules_dir@/libhdf4_module.so

#-----------------------------------------------------------------------#
# Setting the data information
#-----------------------------------------------------------------------#

# The TypeMatch parameter is a list of handler/module names and a regular
# expression separated by a colon. If the regular expression matches an item,
# then the BES uses the associated handler/module. Each <handler>:<regular
# expression> pair is followed by a semicolon. This is used when creating
# containers in the BES (the 'set container' command). The example regular
# expression says to use the 'h4' handler for any file with an extension of
# 'hdf', 'HDF' or 'eos' which may also end in '.gz' or '.bz2'. In the latter
# case the file will be treated as a compressed file.

# BES.Catalog.catalog.TypeMatch=nc:.*\.(nc|NC)(\.gz|\.bz2|\.Z)?$;h4.*\.(hdf|HDF|eos)(\.gz|\.bz2|\.Z)?$;

# To test your TypeMatch regular expression you can use besregtest as
# follows:

# % besregtest type # "nc:.*\.nc$;nc:.*\.nc\.gz$;" fnoc1.nc
# expression ".*\.(nc|NC)(\.gz|\.bz2|\.Z)?$" matches exactly, type = nc

BES.Catalog.catalog.TypeMatch+=h4:.*\.(hdf|HDF|eos|HDFEOS)(\.bz2|\.gz|\.Z)?$;

#-----------------------------------------------------------------------#
# HDF4 handler specific parameters
#-----------------------------------------------------------------------#
# CacheDir: Cache directory used by the HDF4 data handler.
# Suggestion: Consider making this '/tmp/bes'
HDF4.CacheDir=/tmp

#-----------------------------------------------------------------------#
# HDF4 handler specific parameters: 
#-----------------------------------------------------------------------#
# EnableCF: Handle HDF data to follow the CF conventions
#          (true,yes|false,no, defaults to true)
# Since most centers  would like to handle HDF4 data that follows CF now,
# EnableCF is set to be true, KY 2012-6-5
#
#   If this key's value is false, the handler will behave same as the default 
#  handler. The output will not follow basic CF conventions and most of NASA 
# products cannot be visualized by netCDF visualization tools such as IDV and 
# Panoply. The rest of keys below relies on this option and it must be set
# to be "true" to have effects on the handler's output. Thus, this is the most 
# important key to turn it on first.
H4.EnableCF=true


# When turning on this key, the handler will handle AIRS level 3 version 6 
# products and MOD08_M3-like products in a speedy way by taking advantage of 
# the special data structures in these two products. Using this key requires 
# the use of HDF-EOS2 library now although HDF-EOS2 library will not be called.
# By turning on this key, potentially HDF-EOS2 files that provide dimension 
# scales for all dimensions may also be handled quickly. By default, this key 
# should be set to true.
H4.EnableSpecialEOS=true

# DisableScaleOffsetComp: Disable Scale and offset computation  
#
# Some NASA HDF4(MODIS etc.) products don't follow the CF rule to pack the data.
# To avoid the confusion for OPeNDAP's clients , the handler may adopt the 
# following two approaches:

# 1) Apply the scale and offset computation to the individual data point if the
#    scale and offset rule doesn't follow CF in the handler.
#
# 2) If possible, transform the scale and offset rule to CF rule.
#
# Since approach 1) may degrade the performance of fetching large size data by 
# heavy computation, we recommend approach 2), which is indicated by setting 
# this key to be true. By default, this key should always be true.  
H4.DisableScaleOffsetComp=true

# By turning on this key, the handler will check if the datatype of scale_factor
# and offset is the same. This is required by CF. If they don't share the same
# datatype, the handler will make the data type of offset be the same as that 
# of scale_factor. 
#
# Since we haven't found the data type inconsistencies of scale_factor and 
# offset, in order not affect the performance, this key will be set to false by
# default. 
H4.EnableCheckScaleOffsetType = false

#  If this key's value is false, additional Vdata such as "Level 1B Swath 
# Metadta" in LAADS MYD021KM product will not be processed and visible 
# in the DAS/DDS output. Those additional Vdatas are added directly using 
# HDF4 APIs and HDF-EOS2 APIs cannot access them.
H4.EnableHybridVdata=true

#  Some CERES products(CER_AVG,CER_ES4,CER_SRB and CER_ZAVG, see description
# in the HDFSP.h) have  many SDS fields and some Vdata fields. Correspondingly,
# the DDS and DAS page may be very long. The performance of accessing such
# products with visualization clients may be greatly affected. It may 
# potentially even choke netCDF java clients.
#
# To avoid such cases, we will not map vdata to DAP in such products by default.
# Users can turn on this key to check vdata information of some CERES products.
# This key will not affect the access of other products.
H4.EnableCERESVdata=false

#  If this key's value is false, small Vdata datasets will be mapped to 
# arrays in DDS output instead of attributes in DAS. 
# If this key's value is true, Vdata is mapped to attribute if there are less 
# than or equal to 10 records.
H4.EnableVdata_to_Attr=true

#   If this key's value is false, the short dataset name becomes long name with
# Vgroup prefixed and fullpath attribute will not be printed in DAS output.
#   For example, the DAS output for Region_Number dataset
#
#  Region_Number {
#   String coordinates "Colatitude Longitude";
#   String fullpath "/Monthly Hourly Averages/Time And Position/Region Number";
#  }
#
# becomes
#    
#  Monthly_Hourly_Averages_Time_And_Position_Region_Number {
#  String coordinates "Monthly_Hourly_Averages_Time_And_Position_Colatitude \
#                      Monthly_Hourly_Averages_Time_And_Position_Longitude";
#  }
#
# in CER_AVG_Aqua-FM3-MODIS_Edition2B_007005.200510.hdf.
H4.EnableCERESMERRAShortName=true

#   If this key's value is false, handler will check if there's any Vdata that 
# has the same name as SDS. We haven't found such case in NASA products so it is
# safe to disable this to improve performance.
H4.DisableVdataNameclashingCheck=true

#   If this key's value is true, handler will generate Vdata's attributes. By 
# default, it's turned off because most NASA hybrid products do not seem to 
# store important information in Vdata attributes. If you serve pure HDF4 files,
# it's recommended to turn this value to true so that users can see all data. 
# This key will not affect the behavior of the handler triggered by the 
# H4.EnableVdata_to_Attr key except the Vdata attributes of small Vdatas that 
# are mapped to DAS instead of DDS. They will be also turned off from the DAS 
# output. 
#
# If Vdata doesn't have any attribute or field attribute, the description
#
#         String hdf4_vd_desc "This is an HDF4 Vdata.";
#
#  will not appear in the attribute for that Vdata although the key is true.
#  The attribute container of the Vdata will always appear regardless of this 
# key.
H4.EnableVdataDescAttr=false

# This key is for MODIS swath that uses the dimension map.
# If this key is set to be true, the handler will search the directory where 
# the data files reside and see if corresponding MODIS geolocation files (MOD03
# or MYD03) can be found, if yes, the handler will use the corresponding MODIS 
# geolocation files for latitude and longitude.
#
# We feel this is a more accurate approach since additional corrections may be
# done for geo-location values stored in those files [1] although we've done a
# case study that shows the differences between the interpolated values and the
# values stored in the geo-location file are very small.
#
# For example, when the handler serves
#        "MOD05_L2.A2010001.0000.005.2010005211557.hdf"
# it will first look for a geo-location file
#        "MOD03.A2010001.0000.005.2010003235220.hdf"
# from the SAME DIRECTORY where MOD05_L2 file exists.
#
# Please note that the "A2010001.0000" in the middle of the name is the
# "Acquisition Date" of the data so the geo-location file name should have
# exactly the same string. Handler uses this  string to identify if a MODIS
# geo-location file exists or not.
#
#  This feature works only with HDF-EOS2 MODIS products. It will not work on the
# pure HDF4 MODIS product like MOD14 that requires the MOD03 geo-location
# product. That is, putting the MOD03 file with MOD14 in the same directory will
# not affect the handler's DAS/DDS/DDX output of the MOD14 product.
H4.EnableCheckMODISGeoFile=false



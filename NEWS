
	$Id$

News Version 3.4.0

Added a new feature to the BES, the ability to create context within the
BES. This is done through a new command 'set context <name> to <value>; The
dap module uses the context feature when determining how to deliever error
messages. If the context 'errors' is set to 'dap2' then all exceptions are
converted into libdap Error objects. The method print is then called using
stdout. This way, dap2 clients can recognize errors.

Added a hello world example module. It does not handle data requests, but a
simple command to say something to someone. It shows the power of creating
your own module. In doing this, added besCreateModule and the templates
directory to the build. Updated these files. besCreateModule is a shell
script that is used to create a new module. Using template files, it creates
source code, based on a few questions asked. The developer then adds their
own code.

News Version 3.3.1

A new default command was added, 'get stream for <definition>' that streams
back the contents of the specified definition. A definition is created as
usual, using 'set container' commands and using those containers to create
the definition.

Modified the way the container creation works. Restrictions were put on what
files can be used in a 'set container' command. You can not specify ../ in
the path of the container. You must specify a new parameter in the BES
configuration file BES.Data.RootDirectory which points to the root directory
of any containers. This is used for file type containers only.

Created a BESDebug class to allow developers to run the server with debug
option. The option to use with besctl is '-d cerr|<filename>' to output any
debug to standard error (standard out is redirected to the socket, which
would go back to the client) or to the specified file. All BES classes are
derived from BESObj, where a dump method was added to dump the contents of
an object (private data members, information about the instance) and added
an operator<< so that developers can say strm << bes_obj << endl; and have
the dump method called on that BES object.

The BES now does not require libdap. Default responses, transmitters,
commands, etc... are available through the BES: showing help, status,
process id, version information, keys defined in the configuratioon file;
streaming files using the new command; creating, showing, and deleting
containers; creating, showing, and deleting definitions. All DAP specific
commands are now in a loaded module: retrieving the DAS, DDS, DDX, DataDDS
and a transmitter to handle transmitting those response objects.

A request to the catalog now includes an attribute for the node called
isData that is true if the file can be handled by one of the data handlers
registered with the server. For example, if the name of the node ends with
.nc and the netcdf data handler is loaded into the server, then isData would
be set to true.

News Version 3.2.1

The spec file now does not list gzip and bzip2 as required. You only need them
to serve compressed files.

The bes.conf.in file used 'hdf4' in some places and 'h4' in others. This meant
that lazy people like me ;-) who didn't read what they were doing but just
blindly uncommented lines were confused. I editied the file to use the same
identifier in all places. jimg.

News Version 3.2.0

Created bes control script besctl for starting, stopping, restarting, and
checking the status of the bes daemon and listener processes.

Executibles are again in $prefix/bin instead of sbin and have been renamed
besdaemon and beslistener. The bescmdln is also in $prefix/bin.

Modules dynamically loaded by the bes should now be built with the
-avoid-version and -module flags in LDFLAGS. This will not put version
information in the module names themselves. All modules should be of the
form xxx_module

dap-server now has bes support for getting ascii, info, and html responses
from the bes. Check the README for both bes and dap-server for these
updates. To use these modules, simply add ascii_module, usage_module and
www_module to the list of modules for bes to load.

Modules are now names using the name from the configuration file. The data
types are also named using the name in the BES.modules list. For example,
for the hdf4_module if you use BES.modules=dap,cmd,h4 then the handler will
handle data of type h4. For example:

set container values c,hdf/test01.hdf,h4;

BES will then look for the data handler h4 to be loaded.

Transmitter code (derived classes of BESTransmitter) only handle BESInfo
objects. For additional types of response objects, such as the OpeNDAP
responses das, dds, data, etc... developers will register functions with the
different transmitters to handle those types. See BESDapTransmit for
examples.

News Version 3.1.1

The old killdods script has been renamed 'stopbes' and the build files have
been fixed so that the script is installed in $prefix/sbin.

The dap_cmd module is now named dap_cmd_module to follow the pattern set for
the other modules.

The bes.conf file in dispatch/bes is now a generated file with some of the
paths filled in based on $prefix. The file also contains sample text for
three common data handlers.

Fixes to the XML output/response formats. See ChangeLog

Fixes to the exception notifications. See ChangeLog.

News Version 3.1.0

This version of the BES is the first version to make it to a release status.
This is an release of the 1.2 milestone.

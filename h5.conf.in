#-----------------------------------------------------------------------#
# OPeNDAP HDF5 Data Handler BES Module Configuration file               #
#-----------------------------------------------------------------------#

#-----------------------------------------------------------------------#
# Require dap configuration to be loaded first                          #
#-----------------------------------------------------------------------#
BES.Include=dap.conf

#-----------------------------------------------------------------------#
# modules to load, includes data modules and command modules            #
#-----------------------------------------------------------------------#

BES.modules+=h5
BES.module.h5=@bes_modules_dir@/libhdf5_module.so

#-----------------------------------------------------------------------#
# Setting the data information
#-----------------------------------------------------------------------#

# The TypeMatch parameter is a list of handler/module names and a regular
# expression separated by a colon. If the regular expression matches an item,
# then the BES uses the associated handler/module. Each <handler>:<regular
# expression> pair is followed by a semicolon. This is used when creating
# containers in the BES (the 'set container' command). The example regular
# expression says to use the 'h4' handler for any file with an extension of
# 'hdf', 'HDF' or 'eos' which may also end in '.gz' or '.bz2'. In the latter
# case the file will be treated as a compressed file.

# BES.Catalog.catalog.TypeMatch=nc:.*\.(nc|NC)(\.gz|\.bz2|\.Z)?$;h4.*\.(hdf|HDF|eos)(\.gz|\.bz2|\.Z)?$;

# To test your TypeMatch regular expression you can use besregtest as
# follows:

# % besregtest type # "nc:.*\.nc$;nc:.*\.nc\.gz$;" fnoc1.nc
# expression ".*\.(nc|NC)(\.gz|\.bz2|\.Z)?$" matches exactly, type = nc

BES.Catalog.catalog.TypeMatch+=h5:.*\.(HDF5|h5|he5)(\.bz2|\.gz|\.Z)?$;

#-----------------------------------------------------------------------#
# HDF5 handler specific parameters: 
#-----------------------------------------------------------------------#
# Setting H5.IgnoreUnknownTypes to true will cause this handler to ignore
# 64-bit integer types (the only HDF5 it will not process). The default
# value of false causes the handler to return an error to the client 
# that explains that 64-bit types are not supported. Variables of the 
# ignored types simply don't show up in the output.
#
# H5.IgnoreUnknownTypes = true
#
# EnableCF: Handle HDF data to follow the CF conventions
#   (true,yes|false,no, defaults to false)
# Since most centers  would like to handle HDF5 data that follows CF now,
# I set the EnableCF to be true, KY 2011-8-4
#
H5.EnableCF=true

# The following keys only work when H5.EnableCF is set to true.
# ######################################
#
#
# When this key is set to true, HDF5 file ID is passed from metadata to data
# services. This may improve performance. However, it may cause NcML module
# fail to access different granules. So set this key to false by default.
H5.EnablePassFileID=false

# ECS Struct metadata attribute is not mapped to DAP
# The handler makes metadata to follow CF based on this attribute
H5.DisableStructMetaAttr=true

# When this key is set to true, the handler will check if
# there are name clashings among variables and attributes. 
# For NASA HDF5 and HDF-EOS5 products, we don't see any
# name clashings for variables and attributes. In fact,
# unlike HDF4, it is very rare to have name clashing for HDF5.
# So to reduce performance overhead, we set this key to false by default. 
# Users can set this key to true if it becomes necessary.
H5.EnableCheckNameClashing=false

# When this key is set to true, the original path of the HDF5 objects is
# kept as an attribute. Users can set this key to false if users don't
# care about the absolute path of object names. Performance may get improved.
H5.EnableAddPathAttrs=true


# We find netCDF java has a string size limit(currently 32767). If an HDF5 string size
# is greater than this limit, visualization tools(Panoply etc.) that depend on
# the netCDF Java may not open the HDF5 file. So this key is set to be true to
# skip the HDF5 string of which size is greater than 32767. Users should set this
# key to false if that long string information is necessary or visualization clients
# are not used.
H5.EnableDropLongString=true


	$Id: INSTALL 20092 2009-02-10 17:15:41Z pwest $

Updated for version 1.0.3 of the OPeNDAP BES PPT C API.

Installing the BES PPT C API

---------------------------------------------------------------------------

BUILDING THE SOFTWARE
BUILD REQUIREMENTS
NOTES
CONFIGURATION AND TESTING

---------------------------------------------------------------------------

BUILDING THE SOFTWARE

  To build the BES PPT C APIsoftware, follow these steps:

  0. Please skim BUILD REQUIREMENTS and NOTES sections of this file before
     reporting problems. Also, this software _requires_ other software
     components be built and installed and that its configuration file be
     edited. Make sure you read over the CONFIGURATION AND TESTING section!
     Thanks.

  1. Type `./configure' at the system prompt. On some systems you may have
     to type `sh configure'.

  2. Type `make' to build the software, `make check' to run the tests. You
     must have DejaGNU to run `make check.' If you have cppunit installed
     then additional tests will be run. We recommend that you install
     cppunit if you have not already.

  3. Type `make install' to install the BES software. The package installs
     in /usr/local/ by default; use --prefix to change that.

Building from Our SVN Repository

  If you are building from a SVN checkout, run 'autoreconf --verbose' before
  './configure; make'. If you try to run autoconf, et c., by hand and wind up
  with build files that don't work, use 'autoreconf --force --verbose' and
  then './configure; make'.

AFTER INSTALLING

  o See the CONFIGURATION section once you have finished building.

  o Set PATH environment variable to include the bin directory of where
  the software was installed. For example, if using the default installation
  directory, which is /usr/local, make sure that /usr/local/bin is on your
  path.

  o Set LD_LIBRARY_PATH environment variable to include the lib directory of
  where the software was installed. For example, if using the default
  installation directory, which is /usr/local, make sure that /usr/local/lib
  is part of LD_LIBRARY_PATH. You might want to add the following about
  LIBRARY PATH: If you have set $prefix so that the libraries are installed
  in a directory that's included in ld.so.conf (linux, other systems may use
  a slightly different name) you don't have to use LD_LIBRARY_PATH but, if
  you don't, make sure to re-run ldconfig.


BUILD REQUIREMENTS

  o To build from a fresh SVN checkout, you'll need automake 1.10, autoconf
    2.61 and libtool 1.5.26. Earlier versions may work, but may cause
    problems, particularly with the 'distcheck' target for make. Given those
    requirements, use 'autoreconf --force --verbose' and then build as
    described above.

  o You should have gcc/g++ 3.3.x or greater. You'll also need to get the
    stdc++ library that matches the compiler (whatever version). NB: gcc
    2.8.x and earlier *won't* build the software. We're working on modifying
    the software so that it will build with a variety of compilers. As of
    01/22/03 we have built the code using Microsoft's Visual C++ 6.0 and GNU
    gcc/++ 3.2.1, 3.3, 3.4 and 4.0

NOTES

  o If you are building on a new platform (one for which we don't supply
    binaries), please run the tests and tell us about any failures. To do a
    really complete job of this you'll need to get the GNU test system called
    DejaGNU and the CppUnit unit testing package. It is very simple to
    install these and we're very willing to help, so don't be shy!

  o To build a rpm file for a source or binary distribution: 1) Use 'make
    dist' to build a *.tar.gz file; 2) Copy that to ~/rpm/SOURCES,
    and; 3) Run 'rpmbuild -ts ~/rpm/SOURCES/libdap-3.5.1.tar.gz' to make the
    source package. Use '-tb' to make the binary package. I use a
    ~/.rpmmacros file that contains:

	%_topdir		/home/jimg/rpm
	%_tmppath               /home/jimg/rpm/tmp
	
    Or, use the 'rpm' target in the Makefile.

  o DEBUGGING AIDS

    - Debugging is built in to the BES PPT C API software and does not
      require any special debug flags during compile time. To activate
      debugging simply call the function pptcapi_debug_on( file_name )
      function, where file_name is the name of a file to print the debug to.

    - In the past we used efence and dbnew to help debug dynamic memory
      programming errors. We are now using valgrind and suggest you do the
      same. On some Linux platforms you should export MALLOC_CHECK_=0 in the
      shell before running valgrind. This is true for the unit tests and may
      be true for other code. You'll also notice that the Makefile contains
      CXX and C compile-time flags for debugging. These will greatly simplify
      using valgrind and/or a debugger. To use these, don't hack up the
      Makefile.am. Instead export CXXFLAGS with the values you want and then
      run configure. For example:

	  export CXXFLAGS="-g3 -O0 -Wall -fno-defer-pop"; ./configure

CONFIGURATION AND TESTING

  o CONFIGURATION

    - There are currently no configuration required to use this software.

  o TESTING

    - Once you have built the software you can run 'make check' to make sure
      that the software is working properly. There are also tests in the
      testsuite directory that are not a part of the default test
      environment. To use these tests you must first have the BES installed
      with the netcdf_handler module added to it. Once you have this
      installed you should be able to run 'make bes-pptcapi-tests'.


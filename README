DODS/HDF Server Notes:

Client Library is not included in this release.

Support for HDF data types:
    HDF Version:  This release of the server supports HDF4.0r2. 
    SDS:          This is mapped to DODS Grid (if it has a dimension 
                  scale) or DODS Array (if it lacks a dim scale).  
    Raster image: This is read via the HDF 4.0 General Raster
                  interface and is mapped to DODS Array.  Each
                  component of a raster is mapped to a new dimension
                  labelled accordingly.  For example, a 2-dimensional,
                  3-component raster is mapped to an  m x n x 3
                  Array. 
    Vdata:        This is mapped to a DODS Sequence, each element of
                  which is a DODS Structure.  Each subfield of the
                  Vdata is mapped to an element of the Structure.
                  Thus a Vdata with one field of order 3 would be
                  mapped to a Sequence of 1 Structure containing 3
                  base types.
    Attributes:   HDF attributes on SDS, rasters are
                  straight-forwardly mapped to DAP attributes (HDF
                  doesn't yet support Vdata attributes).  File
                  attributes (both SDS, raster) are mapped as
                  attributes of a DAP variable called "HDF_GLOBAL" (by
                  analogy to the way DAP handles netCDF global
                  attributes, i.e., attaching them to "NC_GLOBAL").  
    Annotations:  HDF file annotations mapped in the DAP to attribute 
                  values of type "String" attached to the fake DAP
                  variable named "HDF_ANNOT".  HDF annotations on
                  objects are currently not read by the server. 
    Vgroups:      Vgroups are straight-forwardly mapped to DODS
                  Structures.  This is a new feature of DODS-2.15 and
                  may still contain bugs, although it has been tested
                  thoroughly.  Note that Vgroups are *not* implemented
                  as DAP attributes, as the previous version of this
                  README predicted.

Special characters in HDF identifiers:
  - A number of non-alphanumeric characters (e.g., space, #, +, -)
    used in HDF identifiers are not allowed in the names of DODS
    objects or object components nor in URLs.  The HDF server and
    therefore deals internally with translated versions of these
    identifiers.  To translate the WWW convention of escaping such
    characters by replacing them with "%" followed by the hexadecimal
    value of their ASCII code is used.  For example, "Raster Image #1"
    becomes "Raster%20Image%20%231".  These translations should be
    transparent to users of the server (but they will be visible in
    the DDS, DAS and in any applications which use a client that does
    not translate the identifiers back to their original form).   
  - DODS does not permit identifiers to start with a number; hence
    these are preceded internally by a _ character.

Known problems:
  - Objects of type int8, int16, and unsigned integers of all sizes
    are not available.  This will be fixed in a future release of the
    DODS core software.
  - Error handling:
    * Error handling on some platforms is not ideal.  The server
      needs to be modified to utilize the new DODS error handling
      mechanisms.  This has not been done because the task is
      complicated by the fact that the server code is designed to
      throw C++ exceptions, and these are not yet universally
      available in the g++ compiler. At present, exceptions are faked
      on platforms that do not support exceptions (e.g, SGI) with the
      result that if an error occurs the server may terminate without
      notifying DODS error handling.

Handling of floating point attributes:
  - Because the DODS core software encodes attribute values as ASCII
    strings there will be a loss of accuracy for floating point
    attributes.  This loss of accuracy is dependent on the version of
    the C++ I/O library used in compiling the DODS software (i.e., the
    amount of floating point precision is preserved when outputting to
    ASCII is dependent on the library).  Typically it is very small
    (e.g., at least six decimal places are preserved).

Handling of global attributes:
  - The server will merge the separate global attributes for the SD,
    GR interfaces with any file annotations into one set of global
    attributes.  These will then be available through any of the
    global attribute access functions.
  - If the client opens a constrained dataset (e.g., in SDstart), any
    global attributes of the unconstrained dataset will not be
    accessible because the constraint creates a "virtual dataset"
    which is a subset of the original unconstrained dataset.

Tested platforms:
  - This software has been tested under SGI IRIX 5.3 and Sun Solaris
    2.6.  It should in principle work under other flavors of Unix.


Todd Karakashian (Todd.K.Karakashian@jpl.nasa.gov)
Isaac Henry (ike@seanet.jpl.nasa.gov)
Jake Hamby (Jake.Hamby@jpl.nasa.gov)

NASA/JPL April 1998

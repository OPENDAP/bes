
m4_include([handler_tests_macros.m4])


m4_define([_AT_BESCMD_AND_FILE_TEST], [dnl

    AT_SETUP([BESCMD $1])
    AT_KEYWORDS([bescmd])

    input=$1
    baseline=$2
    output=$abs_builddir/$3

    AS_IF([test -n "$baselines" -a x$baselines = xyes],
        [
        AT_CHECK([besstandalone -c $abs_builddir/bes.conf -i $input], [0], [ignore])
        echo "mv $output $baseline.tmp"
        AT_CHECK([mv $output $baseline.tmp])
        ],
        [
        AT_CHECK([besstandalone -c $abs_builddir/bes.conf -i $input], [0], [ignore])
        AT_CHECK([diff -b -B $baseline $output], [0], [ignore])
        AT_XFAIL_IF([test "$3" = "xfail"])
        ])

    AT_CLEANUP
])

dnl args: test file (bescmd), output pathname, [pass|xfail] 
dnl
m4_define([AT_BESCMD_RESPONSE_AND_FILE_TEST],
[_AT_BESCMD_AND_FILE_TEST([$abs_srcdir/$1], [$abs_srcdir/$1.baseline], [$2], [$3])
])

# These tests do not use the SequenceAggregationServer

AT_BESCMD_RESPONSE_TEST([bescmd/set_contexts.bescmd], [pass])

# For the buildSiteMap command, testing is unusual since the command
# returns nothing but writes to the local file system. The baseline
# will be empty unless we're testing an error.

# These tests all return errors

AT_BESCMD_RESPONSE_TEST([bescmd/site_map.bescmd], [pass])
AT_BESCMD_RESPONSE_TEST([bescmd/site_map2.bescmd], [pass])
AT_BESCMD_RESPONSE_TEST([bescmd/site_map3.bescmd], [pass])

# These work

dnl AT_BESCMD_RESPONSE_TEST([bescmd/site_map4.bescmd], [pass])
AT_BESCMD_RESPONSE_AND_FILE_TEST([bescmd/site_map4.bescmd], [data/site_map.txt], [pass])

# test that data/site_map.txt exists and is not zero length

dnl AT_BESCMD_RESPONSE_TEST([bescmd/site_map5.bescmd], [pass])
AT_BESCMD_RESPONSE_AND_FILE_TEST([bescmd/site_map5.bescmd], [data/new_site_map.txt], [pass])

# test that data/new_site_map.txt exists and is not zero length

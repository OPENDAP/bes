
# Tcl/Expect code for the geturl test. This really is designed to test the
# various servers (hdf, dsp, netcdf, matlab, ...) on serveral different
# platforms. 
# 
# $Id$

# Make sure the global var GETURL is set correctly.

global GETURL
if ![info exists GETURL] then {
    set GETURL "../../bin/geturl"
}

# Compare $expected to the global $comp_output. Run `pass' if they match,
# `fail' otherwise unless `xfailp' is true in which case run `xfail' if they
# do not match. $msg is the name of the test to print when calling pass, fail
# or xfail.
# 
# NB: $expected may be either a string or a file name. If it is the latter,
# read the file and compare its contents to $comp_output.

if {[info exists env(DODS_ROOT)] && [file exists $env(DODS_ROOT)/etc/common_tests.exp]} {
    source $env(DODS_ROOT)/etc/common_tests.exp
} elseif {[file exists ../../etc/common_tests.exp]} {
    source ../../etc/common_tests.exp
} else {
    send_user "Could not load common tests!"
    exit(1)
}

# The four `required' procs are _start, _load, _exit and _version.

proc geturl_start { {switches ""} {urls ""} {file ""}} {
    global verbose
    global GETURL
    global comp_output
    global spawn_id

    if ![string compare $file ""] {
	if {$verbose >= 1} {
	    send_user "Testing geturl $switches $urls ...\n"
	    exp_internal 1
	}
	catch "exec $GETURL $switches {$urls}" comp_output
    } else {
	if {$verbose >= 1} {
	    send_user "Testing geturl $switches $urls >& $file ...\n"
	    exp_internal 1
	}
	catch "exec $GETURL $switches {$urls} > $file" comp_output
    }
}

proc geturl_load {} {
}

proc geturl_exit {} {
    send -raw ""
}

proc geturl_version {} {
    send_user "geturl test suite 1.0\n"
}

proc geturl_all {path dataset {constraint ""} {xfailp 0}} {
    geturl_start "-a" "${path}/${dataset}.hdf"
    compare_stdout "hdf-testsuite/${dataset}.das" "${dataset} DAS" $xfailp
    
    geturl_start "-d" "${path}/${dataset}.hdf"
    compare_stdout "hdf-testsuite/${dataset}.dds" "${dataset} DDS" $xfailp
    
    geturl_start "-D" "${path}/${dataset}.hdf?${constraint}"
    compare_stdout "hdf-testsuite/${dataset}.data" "${dataset} Data" $xfailp
}

proc geturl_subset {path dataset constraint {num "1"}} {
    geturl_start "-D" "${path}/${dataset}.hdf?${constraint}"
    compare_stdout "hdf-testsuite/${dataset}.data${num}" "${dataset} Subset"
}
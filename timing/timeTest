#!/bin/bash
#
# Run timing tests and collect stats for the BES.
# Given one or more bes command files (XML), for each one run it 
# 'reps' times (default is 10) saving the output to $command.log
# and the result to $command.result. Note that only the last result
# is actually saved and that the log files from a previous run
# - possibly hard won data - are silently removed.
#
# options: -r: number of reps
#          -d: comma separated list of bes debug names (e.g., ncml,h4)
#          -D: No debug/timing data output at all

# defaults


exec_besstandalone(){
    besstandalone -c $prefix/etc/bes/bes.conf $debug -i $command > $resultFile 2>>$logFile
}


reps=1
debug="-d cerr,timing"
#clean_cache="/Users/ndp/scratch/hdf4_cache"

# I removed ,bes,xml,dap from debug above to simplify reading the timing
# test data and to avoid timing lots of dubugging statements. jhrg 7/6/15

# do the options thing...

args=`getopt "r:d:D" $*`
if test $? != 0
then
	echo "Usage: timeTest [-r reps][-d name_0,name_1,...,name_n][-D] [bescmd ...]"
	exit 2
fi

set -- $args

for i
do
    case "$i"
    in
        -r)
            reps=$2; shift;
            shift;;
        -d)
            debug="${debug},$2"; shift;
            shift;;
	-D)
	    debug=;
	    shift;;
        --)
            shift; break;;
    esac
done

# now process all of the bescmd files...

for command in $@
do
    logFile=$command".log"
    resultFile=$command".result"
    
    rm -f $logFile* $resultFile 2>/dev/null

    repCount=0
    
    while [ $repCount -lt $reps ]
    do
    
        if [ $clean_cache ]; then
            echo "Pass $repCount: Cleaning cache dir '$clean_cache'"
            rm -r $clean_cache/*
        fi

        { time exec_besstandalone; } 2>>$logFile.time
       
        repCount=$[repCount + 1] 
    done
    
    runs=`grep ELAPSED $logFile |  grep -E "get (dds|das|dods|dmr|ddx|dap)" | wc | awk '{print $1;}' -`
    
    if [ $runs != $reps ]; then
        echo "ERROR: Failed to complete all scheduled reps of command $command. Skipping results."
    else 
        times=`grep ELAPSED $logFile |  grep -E "get (dds|das|dods|dmr|ddx|dap)" | awk '{ split($0,s,"["); print s[10];}' - | sed "s/]//g"`
        
        metrics=`echo $times | awk '{for(i=1;i<=NF;i++){sum += $i; sumsq += ($i)^2;}}END {printf("%f %f \n", sum/NF, sqrt((sumsq-sum^2/NF)/NF))}' -`
        
        avg=`echo $metrics | awk '{print $1}' -`
        stdev=`echo $metrics | awk '{print $2}' -`
    
        echo "$command: $avg ms (+/- $stdev ms) avg time for "$reps" reps."
    fi
done
